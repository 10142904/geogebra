#!/bin/bash
# Creates a benchmark output for the prover in CSV format to stdout,
# and also in HTML format into html/.
# @author Zoltan Kovacs <zoltan@geogebra.org>

DEBUG=1 # In tmp/ there can be some log, if you set this to 1.
TIMEOUT=10
IMGSCALE=25
IMGHEIGHT=25
HTML=html/index.html
TEX=html/index.tex
# PROVERS="Auto Recio Botana BotanaGiac PureSymbolic OpenGeoProver_Wu OpenGeoProver_Area"
#PROVERS="Auto Recio Botana BotanaGiac OpenGeoProver_Wu OpenGeoProver_Area"
PROVERS="Recio Botana BotanaGiac OpenGeoProver_Wu OpenGeoProver_Area Auto"
TESTGGBURLBASE=http://dev.geogebra.org/trac/browser/trunk
GGBDIR=geogebra/test/scripts/benchmark/prover
SINGULARWSREMOTEURL=http://singularws.idm.jku.at/
PROVEDETAILS=0 # Rewrite Prove[] to ProveDetails
USEENGINES=1

if [ "$PROVEDETAILS" = 1 ]; then
 # Remove some incorrectly working provers.
 # PROVERS="Auto Recio Botana BotanaGiac OpenGeoProver_Wu"
 # PROVERS="Botana BotanaGiac"
 # PROVERS="Botana OpenGeoProver_Wu"
 PROVERS="Botana BotanaGiac OpenGeoProver_Wu Auto"
 PROVERS="Botana BotanaGiac"
 fi

PROVERSNO=`echo $PROVERS | wc -w`
THISDIR=`dirname $0`
MYDIR=`cd $THISDIR; pwd`
mkdir -p $MYDIR/tmp $MYDIR/html
LOGFILE=$MYDIR/tmp/.test.log
REGRESSIONFILE=$MYDIR/tmp/.regression.out
rm -f $HTML $TEX

RUNDIR=../../../../../tools/build/targets

VERSION=`cd $RUNDIR; ./run --v 2>&1 | head -1 | cut -f5 -d" "`
REVISION=`svn info | grep ^Revision: | cut -f2 -d" "`

# Title
TITLE="Prover benchmark for GeoGebra $VERSION (r$REVISION)"
DATE=`date "+%Y-%m-%d %H:%M"`
HOST=`hostname`
echo "<!DOCTYPE html><html><head>
<title>$TITLE</title>
</head><body><h1>$TITLE</h1>
<h2>on $DATE at $HOST</h2><pre>" >> $HTML
hwinfo --short --cpu 2>&1 | grep CPU | sed 's/^[ \t]*//' >> $HTML
echo -n "</pre>" >> $HTML
echo "% http://tex.stackexchange.com/questions/50349/color-only-a-cell-of-a-table
\documentclass{article}
\usepackage[table]{xcolor}% http://ctan.org/pkg/xcolor
\usepackage{multirow}
\usepackage{longtable}
\usepackage{array}
\begin{document}
\scriptsize{" >> $TEX

# Heading
echo -n "Test file;"
cat style.html >> $MYDIR/$HTML
echo "<table><tr><th rowspan=\"2\" colspan=\"2\">Test file</th>" >> $MYDIR/$HTML
RESULTCOLUMN=c
if [ $PROVEDETAILS = 1 ]; then
 RESULTCOLUMN="m{1cm}"
 fi
echo "\begin{longtable}{|l|*{$PROVERSNO}{${RESULTCOLUMN}r|}}
\hline
{\multirow{2}{*}{\bf Test}}" >> $MYDIR/$TEX
echo 
for j in $PROVERS; do
 if [ "$USEENGINES" = 1 ]; then
  case $j in
   Recio)
    TOPRINT="Engine 1"
    ;;
   Botana)
    TOPRINT="Engine 2"
    ;;
   BotanaGiac)
    TOPRINT="Engine 2, Giac"
    ;;
   OpenGeoProver_Wu)
    TOPRINT="Engine 3a"
    ;;
   OpenGeoProver_Area)
    TOPRINT="Engine 3b"
    ;;
   *)
    TOPRINT="$j"
    ;;
   esac
else
 TOPRINT=`echo $j | sed s/"_"/" "/`
  fi
 echo -n "$TOPRINT result;Speed;"
 echo "<th colspan=\"2\">$TOPRINT</th>" >> $MYDIR/$HTML
 echo "& \multicolumn{2}{c|}{\bf $TOPRINT}" | sed s/OpenGeoProver/OGP/g |\
  sed s/BotanaGiac/Giac/ | sed s/Botana/Singular/ >> $MYDIR/$TEX
 done
echo "</tr><tr>" >> $MYDIR/$HTML
echo "\\\\" >> $MYDIR/$TEX

for j in $PROVERS; do
 echo "<th>Result</th><th>Speed</th>" >> $MYDIR/$HTML
 echo "&R.&S." >> $MYDIR/$TEX
 rm -f $MYDIR/tmp/rinput-$j
 done

echo "</tr>" >> $MYDIR/$HTML
echo "\\\\ \hline" >> $MYDIR/$TEX
echo

# Content
TESTS=0
for i in `find -name '*.ggb' | sort`; do
 TESTS=`expr $TESTS + 1`
 # Creating thumbnail:
 cd $MYDIR
 DIRNAME=`dirname $i | sed s/"^\.\/tests\/"/""/`
 TEST=`basename $i`
 unzip $i geogebra_thumbnail.png >/dev/null 2>&1
 mv geogebra_thumbnail.png html/$TEST.png
 echo -n "$TEST;"
 echo "<tr><td class=\"ex\"><a href=\"$TESTGGBURLBASE/$GGBDIR/$i\">$TEST</a></td><td class=\"eximg\"><a href=\"$TEST.png\"><img src=\"$TEST.png\" style=\"height:${IMGHEIGHT}px;width:auto;\"></a></td>" >> $MYDIR/$HTML
 TEST=`echo $TEST | sed s/".ggb"//`
 if [ `expr ${#TEST} '>' 15` = 1 ]; then
  TEST=${TEST:0:10}\$\ldots\$${TEST:(-2)}
  fi
 echo "\cellcolor{blue!10}$TEST " | sed s/".ggb"// >> $MYDIR/$TEX

 declare -A RESULTDATA
 declare -A RESULTCLASSDATA
 declare -A CELLCOLORDATA
 declare -A TIMEDATA
 BESTTIME=""
 WORSTTIME=""
 BESTPROVER=""
 WORSTPROVER=""

 if [ "$PROVEDETAILS" = 1 ]; then
  TMPDIR=tempdir
  mkdir -p $TMPDIR
  unzip $i -d $TMPDIR >/dev/null 2>&1
  sed -i s/Prove/ProveDetails/ $TMPDIR/geogebra.xml
  i=$i-ProveDetails
  rm -f $i
  zip -j -r $i $TMPDIR >/dev/null 2>&1
  rm -fR $TMPDIR
  fi

 for j in $PROVERS; do
  cd $MYDIR; cd $RUNDIR
  ENGINE=`echo $j | cut -f1 -d_`
  METHOD=""
  if [ $ENGINE = OpenGeoProver ]; then
   METHOD=`echo $j | cut -f2 -d_`
   fi
  unset SWSOPTS
  unset EXTRAOPTS
  if [ $ENGINE = BotanaGiac ]; then
   ENGINE=Botana
   SWSOPTS=",enable:false"
   EXTRAOPTS=--giac
  elif [ $ENGINE = Botana ]; then
   SWSOPTS=",enable:true,caching:false"
   fi

  # Testing:
  timeout $TIMEOUT ./run \
   --prover=engine:$ENGINE,method:$METHOD,timeout:$TIMEOUT --singularws=remoteurl:${SINGULARWSREMOTEURL}${SWSOPTS} \
   --logFile=$LOGFILE \
   --regressionFile=$REGRESSIONFILE $MYDIR/$i --language=en $EXTRAOPTS \
   >$MYDIR/tmp/.test.stdout 2>$MYDIR/tmp/.test.stderr
  
  RETVAL=$?
  if [ $RETVAL = 124 ]; then
   RESULT=""
   TIME=timeout
  else
   # Regression out file used to show the wrong result (the stored value in the file is shown):
   RESULT=`cat $REGRESSIONFILE | grep Prove | sed s/" null ="//g | sed s/'"'//g | sed 's/\(.*\) == \(.*\)/\2/' | sed 's/\(.*\) = \(.*\)/\2/'`
   # But now it's OK, thanks to Markus and Simon in [17470].
   #RESULT=`cat $LOGFILE | grep "Statement is " | sed 's/\(.*\)Statement is \(.*\)/\2/'`
   TIME=`cat $LOGFILE | grep Benchmarking | awk '{print $5}'`
   if [ $DEBUG = 1 ]; then
    cp $REGRESSIONFILE $REGRESSIONFILE-$TEST-$j
    cp $LOGFILE $LOGFILE-$TEST-$j
    cp $MYDIR/tmp/.test.stdout $MYDIR/tmp/.test.stdout-$TEST-$j
    cp $MYDIR/tmp/.test.stderr $MYDIR/tmp/.test.stderr-$TEST-$j
    fi
   fi # No timeout
  echo -n "$RESULT;$TIME;"
  RESULTCLASS=" class=\"o6\""
  CELLCOLOR="green!10"
  DIRNAMELENGTH=${#DIRNAME}
  if [ "${RESULT:0:$DIRNAMELENGTH}" != "$DIRNAME" ]; then
   if [ "$RESULT" = "undefined" -o "$RESULT" = "" ]; then
    RESULTCLASS=" class=\"undefined\""
    CELLCOLOR="yellow!25"
   else
    RESULTCLASS=" class=\"error\""
    CELLCOLOR="red!25"
    fi
  else
   echo "$TIME" >> $MYDIR/tmp/rinput-$j
   VARNAME=$`echo $j`
   VALUE=`eval echo $VARNAME`
   eval $j=`expr $VALUE + 1`
   if [ $TIME -lt 1000 ]; then
    RESULTCLASS=" class=\"o5\""
    CELLCOLOR="green!20"
    fi
   if [ $TIME -lt 300 ]; then
    RESULTCLASS=" class=\"o4\""
    CELLCOLOR="green!30"
    fi
   if [ $TIME -lt 150 ]; then
    RESULTCLASS=" class=\"o3\""
    CELLCOLOR="green!40"
    fi
   if [ $TIME -lt 50 ]; then
    RESULTCLASS=" class=\"o2\""
    CELLCOLOR="green!50"
    fi
   if [ $TIME -lt 20 ]; then
    RESULTCLASS=" class=\"o1\""
    CELLCOLOR="green!60"
    fi
   fi
  RESULTCLASSDATA[$j]=$RESULTCLASS
  CELLCOLORDATA[$j]="$CELLCOLOR"
  RESULTDATA[$j]=$RESULT
  TIMEDATA[$j]=$TIME

  # Storing best and worst results
  if [ "$TIME" != "" -a "$RESULT" = "$DIRNAME" -a $j != Auto ]; then
   # First time result
   if [ "$BESTTIME" = "" ]; then
    BESTTIME=$TIME
    BESTPROVER=$j
   else
    # At least second time result
    if [ $TIME -lt $BESTTIME ]; then
     BESTTIME=$TIME
     BESTPROVER=$j
    else
     if [ "$WORSTTIME" = "" ]; then
      # Exactly the second time result
      WORSTTIME=$TIME 
      WORSTPROVER=$j
     else
      if [ $WORSTTIME -lt $TIME ]; then
       # More than second time result with worst current time
       WORSTTIME=$TIME
       WORSTPROVER=$j
       fi # end of >2, worst current
      fi # end of >2, not worst current
     fi # end of >=2
    fi # end of >=1, not best time current
   fi # end of >=1 (all cases)
  # echo "<td$RESULTCLASS>$RESULT</td><td$RESULTCLASS>$TIME</td>" >> $MYDIR/$HTML
  done # All provers done for this tests

 for j in $PROVERS; do
  RESULTCLASS=${RESULTCLASSDATA[$j]}
  CELLCOLOR=${CELLCOLORDATA[$j]}
  RESULT=${RESULTDATA[$j]}
  if [ "$RESULT" = undefined ]; then
   RESULT=""
   fi
  TIME=${TIMEDATA[$j]}
  SUMCLASS=""
  SUMCLASSTEX=""
  if [ "$WORSTPROVER" = "$j" ]; then
   SUMCLASS="worst"
   SUMCLASSTEX="\sl"
   fi
  if [ "$BESTPROVER" = "$j" ]; then
   SUMCLASS="best"
   SUMCLASSTEX="\bf"
   fi
  echo "<td$RESULTCLASS>$RESULT</td><td$RESULTCLASS><p class=\"$SUMCLASS\">$TIME</p></td>" >> $MYDIR/$HTML
  # TeX related changes
  TRUE=t
  if [ $PROVEDETAILS = 1 ]; then
   TRUE=""
   fi
  RESULT=`echo $RESULT | sed s/true/$TRUE/g | sed s/false/f/g`
  RESULT=`echo $RESULT | sed s/"AreEqual\[\([A-Za-z0-9_]\+\),\([A-Za-z0-9_]\+\)\]"/"\$\\1=\\2\$"/g |\
   sed s/"AreParallel\[\([A-Za-z0-9_]\+\),\([A-Za-z0-9_]\+\)\]"/"\$\\1\\\\\\\\parallel \\2\$"/g |\
   sed s/"ArePerpendicular\[\([A-Za-z0-9_]\+\),\([A-Za-z0-9_]\+\)\]"/"\$\\1\\\\perp \\2\$"/g |\
   sed s/"AreCollinear\[\([A-Za-z0-9_]\+\),\([A-Za-z0-9_]\+\),\([A-Za-z0-9_]\+\)\]"/"\$\\\\\\\\overline{\\1\\2\\3}\$"/g |\
   sed s/"\\\\$ \\\\$"/"\$\\\\\\\\hfill\\\\\\\\newline\$"/g |\
   sed s/"..."/"\$\\\\\\\\ldots\$"/g`
  if [ "$TIME" = timeout ]; then
   TIME="t/o"
   fi
  echo "& \cellcolor{$CELLCOLOR}$RESULT & \cellcolor{$CELLCOLOR}{$SUMCLASSTEX $TIME} " >> $MYDIR/$TEX
  done

 echo
 echo "</tr>" >> $MYDIR/$HTML
 echo "\\\\ \\hline" >> $MYDIR/$TEX
 done # All tests done

# Summary
echo -n "Summary;"
echo "<tr><td class=\"summary\" colspan=\"2\"><b>Summary (of $TESTS)</b></td>" >> $MYDIR/$HTML
echo "{\bf Total (of $TESTS)}" >> $MYDIR/$TEX
for j in $PROVERS; do
 VARNAME=$`echo $j`
 VALUE=`eval echo $VARNAME`
 echo -n "$VALUE;;"
 echo "<td class=\"summary\" colspan=\"2\"><b>$VALUE</b></td>" >> $MYDIR/$HTML
 echo "&\multicolumn{2}{c|}{\bf $VALUE}" >> $MYDIR/$TEX
 done
echo "</tr>" >> $MYDIR/$HTML
echo "\\\\ \\hline" >> $MYDIR/$TEX
echo

echo "</tr></table></body></html>" >> $MYDIR/$HTML
echo "\end{longtable}
}
\end{document}" >> $MYDIR/$TEX
