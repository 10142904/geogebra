#!/bin/bash
#---------------------------------------------
# Script to install GeoGebra
#---------------------------------------------

#---------------------------------------------
# Used environment variables:
#
# NAME=<name of geogebra start script> # If unset, 'geogebra' will be used. (Example: 'geogebra5-beta')
#
# DESCRIPTION=<application name shown by desktop file> # If unset, 'GeoGebra' will be used. (Example: 'GeoGebra 5.0 Beta')
#
# INSTALL=<path of install macro> # If unset, './install-sh' will be used. (Distributors may want to set their own install macro.)
#
# CHMOD=<path of chmod macro> # If unset, 'chmod' will be used. (Distributors may want to set their own chmod macro.)
#
# BINDIR=<path for executable binary files> # If unset, 'usr/bin' will be used.
#
# USE_ABSOLUTE_PATH_OF_BINDIR=<boolean> # If unset, 'false' will be used.
#
# DATADIR=<path for data files> # If unset, '/usr/share' will be used.
#
# DOCDIR=<path for doc files> # If unset, '/usr/share/doc' will be used.
#
# LIBDIR=<path for libraries> # If unset, '/usr/lib' will be used.
#
# CREATE_UNINSTALLER=<boolean> # If unset, 'false' will be used. (Distributors normally have their own uninstaller.)
#
# VERBOSE_MODE=<boolean> # If unset, 'false' will be used.

#---------------------------------------------
# If $NAME not set, use 'geogebra'.

if [ -z "$NAME" ]; then
	NAME='geogebra'
fi

#---------------------------------------------
# If $DESCRIPTION not set, use 'GeoGebra'.

if [ -z "$DESCRIPTION" ]; then
	DESCRIPTION='GeoGebra'
fi

#---------------------------------------------
# If $INSTALL not set, use './install-sh'.

if [ -z "$INSTALL" ]; then
	INSTALL='./install-sh'
fi

#---------------------------------------------
# If $CHMOD not set, use 'chmod'.

if [ -z "$CHMOD" ]; then
	CHMOD='chmod'
fi

#---------------------------------------------
# If $BINDIR not set, use '/usr/bin'.

if [ -z "$BINDIR" ]; then
	BINDIR='/usr/bin'
fi

#---------------------------------------------
# If $USE_ABSOLUTE_PATH_OF_BINDIR not set, use 'false'.

if [ -z "$USE_ABSOLUTE_PATH_OF_BINDIR" ]; then
	USE_ABSOLUTE_PATH_OF_BINDIR='false'
fi

#---------------------------------------------
# If $DATADIR not set, use '/usr/share'.

if [ -z "$DATADIR" ]; then
	DATADIR='/usr/share'
fi

#---------------------------------------------
# If $DOCDIR not set, use '/usr/share/doc'.

if [ -z "$DOCDIR" ]; then
	DOCDIR='/usr/share/doc'
fi

#---------------------------------------------
# If $LIBDIR not set, use '/usr/lib'.

if [ -z "$LIBDIR" ]; then
	LIBDIR='/usr/lib'
fi

#---------------------------------------------
# If $CREATE_UNINSTALLER not set, use 'false'.

if [ -z "$CREATE_UNINSTALLER" ]; then
	CREATE_UNINSTALLER='false'
fi

#---------------------------------------------
# If $VERBOSE_MODE not set, use 'false'.

if [ -z "$VERBOSE_MODE" ]; then
	VERBOSE_MODE='false'
fi

#---------------------------------------------
# Install everything.

"$INSTALL" -d -m 755 "$BINDIR"
cat > "$BINDIR/$NAME" << EOF
#!/bin/bash
#---------------------------------------------
# Script to start GeoGebra
#---------------------------------------------

#---------------------------------------------
# Export name of this script

export GG_SCRIPTNAME=\$(basename \$0)`if [ -e "jni64" -o -e "jni32" ]; then echo -e "\n\n#---------------------------------------------\n# Export native library path\n\nexport GG_DJAVA_LIBRARY_PATH='$LIBDIR/$NAME/jni'"; fi`

#---------------------------------------------
# Run

exec "$DATADIR/$NAME/geogebra" "\$@"
EOF
"$CHMOD" 755 "$BINDIR/$NAME"
"$INSTALL" -d -m 755 "$DATADIR"
"$INSTALL" -d -m 755 "$DATADIR/applications"

# Look for translations inside the example desktop file included
# in this package, to create an appropriate desktop file:
DESKTOPFILE_LINES=()
while read DESKTOPFILE
do
	if [ $(expr match "$DESKTOPFILE" '.*GenericName') -ne 0 ]; then
		DESKTOPFILE_LINES[${#DESKTOPFILE_LINES[*]}]="$DESKTOPFILE"
	elif [ $(expr match "$DESKTOPFILE" '.*Comment') -ne 0 ]; then
		DESKTOPFILE_LINES[${#DESKTOPFILE_LINES[*]}]="$DESKTOPFILE"
	fi
done < "geogebra.desktop"
cat > "$DATADIR/applications/$NAME.desktop" << EOF
[Desktop Entry]
Name=$DESCRIPTION
`IFS=$'\n'; for LINE in ${DESKTOPFILE_LINES[*]}; do echo "$LINE"; done; unset IFS`
TryExec=`if [ "$USE_ABSOLUTE_PATH_OF_BINDIR" = 'true' ]; then echo "$BINDIR/$NAME"; else echo "$NAME"; fi`
Exec=`if [ "$USE_ABSOLUTE_PATH_OF_BINDIR" = 'true' ]; then echo "$BINDIR/$NAME %F"; else echo "$NAME %F"; fi`
Icon=$NAME
Terminal=false
Type=Application
StartupNotify=true
StartupWMClass=geogebra-GeoGebra
Categories=Education;Math;
MimeType=application/vnd.geogebra.file;application/vnd.geogebra.tool;
EOF

"$INSTALL" -d -m 755 "$DOCDIR"
"$INSTALL" -d -m 755 "$DOCDIR/packages"
"$INSTALL" -d -m 755 "$DOCDIR/packages/$NAME"
"$INSTALL" -m 644 "_LICENSE.txt" "$DOCDIR/packages/$NAME"
if [ -e "jni64" -a "$ARCH" = "64" ]; then
	"$INSTALL" -d -m 755 "$LIBDIR"
	"$INSTALL" -d -m 755 "$LIBDIR/$NAME"
	"$INSTALL" -d -m 755 "$LIBDIR/$NAME/jni"
	"$INSTALL" -m 644 "jni64/libgluegen-rt.so" "$LIBDIR/$NAME/jni"
	"$CHMOD" 755 "$LIBDIR/$NAME/jni/libgluegen-rt.so"
	"$INSTALL" -m 644 "jni64/libjogl.so" "$LIBDIR/$NAME/jni"
	"$CHMOD" 755 "$LIBDIR/$NAME/jni/libjogl.so"
	"$INSTALL" -m 644 "jni64/libjogl_awt.so" "$LIBDIR/$NAME/jni"
	"$CHMOD" 755 "$LIBDIR/$NAME/jni/libjogl_awt.so"
elif [ -e "jni32" ]; then
	"$INSTALL" -d -m 755 "$LIBDIR"
	"$INSTALL" -d -m 755 "$LIBDIR/$NAME"
	"$INSTALL" -d -m 755 "$LIBDIR/$NAME/jni"
	"$INSTALL" -m 644 "jni32/libgluegen-rt.so" "$LIBDIR/$NAME/jni"
	"$CHMOD" 755 "$LIBDIR/$NAME/jni/libgluegen-rt.so"
	"$INSTALL" -m 644 "jni32/libjogl.so" "$LIBDIR/$NAME/jni"
	"$CHMOD" 755 "$LIBDIR/$NAME/jni/libjogl.so"
	"$INSTALL" -m 644 "jni32/libjogl_awt.so" "$LIBDIR/$NAME/jni"
	"$CHMOD" 755 "$LIBDIR/$NAME/jni/libjogl_awt.so"
fi
"$INSTALL" -d -m 755 "$DATADIR/$NAME"
JARS=`ls *".jar"`
for FILE in `echo $JARS | sed 's/\n/ /g'`; do
	"$INSTALL" -m 644 "$FILE" "$DATADIR/$NAME"
done
"$INSTALL" -m 644 "geogebra" "$DATADIR/$NAME"
"$CHMOD" 755 "$DATADIR/$NAME/geogebra"
"$INSTALL" -d -m 755 "$DATADIR/icons"
"$INSTALL" -d -m 755 "$DATADIR/icons/hicolor"
for SIZE in 16x16 22x22 32x32 48x48 64x64 128x128 256x256; do
	"$INSTALL" -d -m 755 "$DATADIR/icons/hicolor/$SIZE"
	"$INSTALL" -d -m 755 "$DATADIR/icons/hicolor/$SIZE/apps"
	"$INSTALL" -m 644 "icons/hicolor/$SIZE/apps/geogebra.png" "$DATADIR/icons/hicolor/$SIZE/apps/$NAME.png"
done

# Create uninstall script, if $CREATE_UNINSTALLER is not set 'false':
if [ "$CREATE_UNINSTALLER" != "false" ]; then
	cat > "$BINDIR/uninstall-$NAME" << EOF
#!/bin/bash
#---------------------------------------------
# Script to uninstall $DESCRIPTION
#---------------------------------------------

# Define usage function:
func_usage()
{
cat << _USAGE
Usage: uninstall-$NAME [Options]

Uninstall $DESCRIPTION

Options:
  --help         Print this help message
  --force        Uninstall without asking questions
_USAGE
}

# Check for options:
FORCE="false"
for i in "\$@"; do
	case "\$i" in
	--help | --hel | --he | --h )
		func_usage; exit 0 ;;
	esac
	if [ "\$i" = '--force' ]; then
		FORCE="true"
	fi
done

# Ask to continue, if option --force is not used:
if [ "\$FORCE" = "false" ]; then
	KDIALOG_possible="false"
	QDBUS_possible="false"
	ZENITY_possible="false"
	XDIALOG_possible="false"
	if [ "\$UID" != "0" ]; then
		KDIALOG_possible="true"
		QDBUS_possible="false"
		ZENITY_possible="false"
		XDIALOG_possible="false"
		type -P kdialog &>/dev/null || KDIALOG_possible="false"
		if [ "\$KDIALOG_possible" = "true" ]; then
			QDBUS_possible="true"
			type -P qdbus &>/dev/null || QDBUS_possible="false"
		else
			ZENITY_possible="true"
			type -P zenity &>/dev/null || ZENITY_possible="false"
			if [ "\$ZENITY_possible" = "false" ]; then
				XDIALOG_possible="true"
				type -P Xdialog &>/dev/null || XDIALOG_possible="false"
			fi
		fi
	fi
	ANSWER=1
	if [ "\$KDIALOG_possible" = "true" ]; then
		kdialog --caption "$DESCRIPTION" --icon "$DATADIR/icons/hicolor/64x64/apps/$NAME.png" --warningcontinuecancel "This will uninstall $DESCRIPTION."
		ANSWER=\$?
	elif [ "\$ZENITY_possible" = "true" ]; then
		zenity --title="$DESCRIPTION" --window-icon="$DATADIR/icons/hicolor/64x64/apps/$NAME.png" --warning --text="This will uninstall $DESCRIPTION."
		ANSWER=\$?
	elif [ "\$XDIALOG_possible" = "true" ]; then
		Xdialog --title "$DESCRIPTION" --yesno "This will uninstall $DESCRIPTION.\n\nDo you want to continue?" 0 0
		ANSWER=\$?
	else
		echo "This will uninstall $DESCRIPTION."
		tput bold
		read -p "Do you want to continue? [y/n]: "
		tput sgr0
		case "\$REPLY" in
		y | Y | yes | Yes | YES )
			ANSWER=0 ;;
		esac
	fi
	if [ \$ANSWER != 0 ]; then
		exit 0
	fi
fi

# Look for uninstall scripts of other packages:
if [ -e "$BINDIR/uninstall-geogebra-mime-data" ]; then
	UNINSTALL_geogebra_mime_data=0
fi
if [ -e "$BINDIR/uninstall-geogebra-oxygen-icons" ]; then
	UNINSTALL_geogebra_oxygen_icons=0
fi
if [ -e "$BINDIR/uninstall-geogebra-thumbnail-gtk" ]; then
	UNINSTALL_geogebra_thumbnail_gtk=0
fi
if [ -e "$BINDIR/uninstall-geogebra-thumbnail-kde" ]; then
	UNINSTALL_geogebra_thumbnail_kde=0
fi

# Ask for uninstallation of other packages, if option --force is not used::
if [ "\$FORCE" = "false" ]; then
	if [ \$UNINSTALL_geogebra_mime_data = 0 ]; then
		UNINSTALL_geogebra_mime_data=1
		if [ "\$KDIALOG_possible" = "true" ]; then
			kdialog --caption "$DESCRIPTION" --icon "$DATADIR/icons/hicolor/64x64/apps/$NAME.png" --yesno "Do you want to uninstall the Mime database for GeoGebra files, too?"
			UNINSTALL_geogebra_mime_data=\$?
		elif [ "\$ZENITY_possible" = "true" ]; then
			zenity --title="$DESCRIPTION" --window-icon="$DATADIR/icons/hicolor/64x64/apps/$NAME.png" --question --text="Do you want to uninstall the Mime database for GeoGebra files, too?"
			UNINSTALL_geogebra_mime_data=\$?
		elif [ "\$XDIALOG_possible" = "true" ]; then
			Xdialog --title "$DESCRIPTION" --yesno "Do you want to uninstall the Mime database for GeoGebra files, too?" 0 0
			UNINSTALL_geogebra_mime_data=\$?
		else
			tput bold
			read -p "Do you want to uninstall the Mime database for GeoGebra files, too? [y/n]: "
			tput sgr0
			case "\$REPLY" in
			y | Y | yes | Yes | YES )
				UNINSTALL_geogebra_mime_data=0 ;;
			esac
		fi
	fi
	if [ \$UNINSTALL_geogebra_oxygen_icons = 0 ]; then
		UNINSTALL_geogebra_oxygen_icons=1
		if [ "\$KDIALOG_possible" = "true" ]; then
			kdialog --caption "$DESCRIPTION" --icon "$DATADIR/icons/hicolor/64x64/apps/$NAME.png" --yesno "Do you want to uninstall GeoGebra Icons for Oxygen Icon Theme, too?"
			UNINSTALL_geogebra_oxygen_icons=\$?
		elif [ "\$ZENITY_possible" = "true" ]; then
			zenity --title="$DESCRIPTION" --window-icon="$DATADIR/icons/hicolor/64x64/apps/$NAME.png" --question --text="Do you want to uninstall GeoGebra Icons for Oxygen Icon Theme, too?"
			UNINSTALL_geogebra_oxygen_icons=\$?
		elif [ "\$XDIALOG_possible" = "true" ]; then
			Xdialog --title "$DESCRIPTION" --yesno "Do you want to uninstall GeoGebra Icons for Oxygen Icon Theme, too?" 0 0
			UNINSTALL_geogebra_oxygen_icons=\$?
		else
			tput bold
			read -p "Do you want to uninstall GeoGebra Icons for Oxygen Icon Theme, too? [y/n]: "
			tput sgr0
			case "\$REPLY" in
			y | Y | yes | Yes | YES )
				UNINSTALL_geogebra_oxygen_icons=0 ;;
			esac
		fi
	fi
	if [ \$UNINSTALL_geogebra_thumbnail_gtk = 0 ]; then
		UNINSTALL_geogebra_thumbnail_gtk=1
		if [ "\$KDIALOG_possible" = "true" ]; then
			kdialog --caption "$DESCRIPTION" --icon "$DATADIR/icons/hicolor/64x64/apps/$NAME.png" --yesno "Do you want to uninstall the GTK+ Thumbnail Creator for GeoGebra files, too?"
			UNINSTALL_geogebra_thumbnail_gtk=\$?
		elif [ "\$ZENITY_possible" = "true" ]; then
			zenity --title="$DESCRIPTION" --window-icon="$DATADIR/icons/hicolor/64x64/apps/$NAME.png" --question --text="Do you want to uninstall the GTK+ Thumbnail Creator for GeoGebra files, too?"
			UNINSTALL_geogebra_thumbnail_gtk=\$?
		elif [ "\$XDIALOG_possible" = "true" ]; then
			Xdialog --title "$DESCRIPTION" --yesno "Do you want to uninstall the GTK+ Thumbnail Creator for GeoGebra files, too?" 0 0
			UNINSTALL_geogebra_thumbnail_gtk=\$?
		else
			tput bold
			read -p "Do you want to uninstall the GTK+ Thumbnail Creator for GeoGebra files, too? [y/n]: "
			tput sgr0
			case "\$REPLY" in
			y | Y | yes | Yes | YES )
				UNINSTALL_geogebra_thumbnail_gtk=0 ;;
			esac
		fi
	fi
	if [ \$UNINSTALL_geogebra_thumbnail_kde = 0 ]; then
		UNINSTALL_geogebra_thumbnail_kde=1
		if [ "\$KDIALOG_possible" = "true" ]; then
			kdialog --caption "$DESCRIPTION" --icon "$DATADIR/icons/hicolor/64x64/apps/$NAME.png" --yesno "Do you want to uninstall the KDE Thumbnail Creator for GeoGebra files, too?"
			UNINSTALL_geogebra_thumbnail_kde=\$?
		elif [ "\$ZENITY_possible" = "true" ]; then
			zenity --title="$DESCRIPTION" --window-icon="$DATADIR/icons/hicolor/64x64/apps/$NAME.png" --question --text="Do you want to uninstall the KDE Thumbnail Creator for GeoGebra files, too?"
			UNINSTALL_geogebra_thumbnail_kde=\$?
		elif [ "\$XDIALOG_possible" = "true" ]; then
			Xdialog --title "$DESCRIPTION" --yesno "Do you want to uninstall the KDE Thumbnail Creator for GeoGebra files, too?" 0 0
			UNINSTALL_geogebra_thumbnail_kde=\$?
		else
			tput bold
			read -p "Do you want to uninstall the KDE Thumbnail Creator for GeoGebra files, too? [y/n]: "
			tput sgr0
			case "\$REPLY" in
			y | Y | yes | Yes | YES )
				UNINSTALL_geogebra_thumbnail_kde=0 ;;
			esac
		fi
	fi
fi

# Uninstall files and show progressbar during installation, if possible and option --force is not used:
if [ "\$KDIALOG_possible" = "true" -a "\$QDBUS_possible" = "true" -a "\$FORCE" = "false" ]; then
	NUMBER_OF_PACKAGES=1
	if [ "\$UNINSTALL_geogebra_mime_data" = 0 ]; then
		NUMBER_OF_PACKAGES=\$((NUMBER_OF_PACKAGES + 1))
	fi
	if [ "\$UNINSTALL_geogebra_oxygen_icons" = 0 ]; then
		NUMBER_OF_PACKAGES=\$((NUMBER_OF_PACKAGES + 1))
	fi
	if [ "\$UNINSTALL_geogebra_thumbnail_gtk" = 0 ]; then
		NUMBER_OF_PACKAGES=\$((NUMBER_OF_PACKAGES + 1))
	fi
	if [ "\$UNINSTALL_geogebra_thumbnail_kde" = 0 ]; then
		NUMBER_OF_PACKAGES=\$((NUMBER_OF_PACKAGES + 1))
	fi
	DBUSREF=\`kdialog --caption "$DESCRIPTION" --icon "$DATADIR/icons/hicolor/64x64/apps/$NAME.png" --progressbar "Uninstalling $DESCRIPTION." \$NUMBER_OF_PACKAGES\`
fi
if [ -w "$BINDIR/$NAME" ]; then
	rm -f "$BINDIR/$NAME"
fi
if [ -w "$LIBDIR/$NAME/jni/libgluegen-rt.so" ]; then
	rm -f "$LIBDIR/$NAME/jni/libgluegen-rt.so"
fi
if [ -w "$LIBDIR/$NAME/jni/libjogl.so" ]; then
	rm -f "$LIBDIR/$NAME/jni/libjogl.so"
fi
if [ -w "$LIBDIR/$NAME/jni/libjogl_awt.so" ]; then
	rm -f "$LIBDIR/$NAME/jni/libjogl_awt.so"
fi
rmdir --ignore-fail-on-non-empty "$LIBDIR/$NAME/jni"
rmdir --ignore-fail-on-non-empty "$LIBDIR/$NAME"
if [ -w "$DATADIR/applications/$NAME.desktop" ]; then
	rm -f "$DATADIR/applications/$NAME.desktop"
fi
if [ -w "$DOCDIR/packages/$NAME/_LICENSE.txt" ]; then
	rm -f "$DOCDIR/packages/$NAME/_LICENSE.txt"
fi
rmdir --ignore-fail-on-non-empty "$DOCDIR/packages/$NAME"
if  [ -w "$DATADIR/$NAME/geogebra" ]; then
	rm -f "$DATADIR/$NAME/geogebra"
fi
for FILE in `echo $JARS | sed 's/\n/ /g'`; do
	if [ -w "$DATADIR/$NAME/\$FILE" ]; then
		rm -f "$DATADIR/$NAME/\$FILE"
	fi
done
rmdir --ignore-fail-on-non-empty "$DATADIR/$NAME"
for SIZE in 16x16 22x22 32x32 48x48 64x64 128x128 256x256; do
	if [ -w "$DATADIR/icons/hicolor/\$SIZE/apps/$NAME.png" ]; then
		rm -f "$DATADIR/icons/hicolor/\$SIZE/apps/$NAME.png"
	fi
done
if [ "\$KDIALOG_possible" = "true" -a "\$QDBUS_possible" = "true" -a "\$FORCE" = "false" ]; then
	qdbus \$DBUSREF Set "" value 1 >/dev/null
	PACKAGE_NUMBER=2
fi

# Uninstall other packages, if not declined:
if [ \$UNINSTALL_geogebra_mime_data = 0 ]; then
	if [ "\$KDIALOG_possible" = "true" -a "\$QDBUS_possible" = "true" -a "\$FORCE" = "false" ]; then
		qdbus \$DBUSREF setLabelText "Uninstalling the Mime database for GeoGebra files." >/dev/null
	fi
	$BINDIR/uninstall-geogebra-mime-data --force
	if [ "\$KDIALOG_possible" = "true" -a "\$QDBUS_possible" = "true" -a "\$FORCE" = "false" ]; then
		qdbus \$DBUSREF Set "" value \$PACKAGE_NUMBER >/dev/null
		PACKAGE_NUMBER=\$((PACKAGE_NUMBER + 1))
	fi
fi
if [ \$UNINSTALL_geogebra_oxygen_icons = 0 ]; then
	if [ "\$KDIALOG_possible" = "true" -a "\$QDBUS_possible" = "true" -a "\$FORCE" = "false" ]; then
		qdbus \$DBUSREF setLabelText "Uninstalling GeoGebra Icons for Oxygen Icon Theme." >/dev/null
	fi
	$BINDIR/uninstall-geogebra-oxygen-icons --force
	if [ "\$KDIALOG_possible" = "true" -a "\$QDBUS_possible" = "true" -a "\$FORCE" = "false" ]; then
		qdbus \$DBUSREF Set "" value \$PACKAGE_NUMBER >/dev/null
		PACKAGE_NUMBER=\$((PACKAGE_NUMBER + 1))
	fi
fi
if [ \$UNINSTALL_geogebra_thumbnail_gtk = 0 ]; then
	if [ "\$KDIALOG_possible" = "true" -a "\$QDBUS_possible" = "true" -a "\$FORCE" = "false" ]; then
		qdbus \$DBUSREF setLabelText "Uninstalling the GTK+ Thumbnail Creator for GeoGebra files." >/dev/null
	fi
	$BINDIR/uninstall-geogebra-thumbnail-gtk --force
	if [ "\$KDIALOG_possible" = "true" -a "\$QDBUS_possible" = "true" -a "\$FORCE" = "false" ]; then
		qdbus \$DBUSREF Set "" value \$PACKAGE_NUMBER >/dev/null
		PACKAGE_NUMBER=\$((PACKAGE_NUMBER + 1))
	fi
fi
if [ \$UNINSTALL_geogebra_thumbnail_kde = 0 ]; then
	if [ "\$KDIALOG_possible" = "true" -a "\$QDBUS_possible" = "true" -a "\$FORCE" = "false" ]; then
		qdbus \$DBUSREF setLabelText "Uninstalling the KDE Thumbnail Creator for GeoGebra files." >/dev/null
	fi
	$BINDIR/uninstall-geogebra-thumbnail-kde --force
	if [ "\$KDIALOG_possible" = "true" -a "\$QDBUS_possible" = "true" -a "\$FORCE" = "false" ]; then
		qdbus \$DBUSREF Set "" value \$PACKAGE_NUMBER >/dev/null
	fi
fi
if [ "\$KDIALOG_possible" = "true" -a "\$QDBUS_possible" = "true" -a "\$FORCE" = "false" ]; then
	qdbus \$DBUSREF setLabelText "Uninstallation completed." >/dev/null
	qdbus \$DBUSREF close >/dev/null
fi

# Run update-desktop-database, if possible:
UPDATE_DESKTOP_DATABASE_possible="true"
type -P update-desktop-database &>/dev/null || UPDATE_DESKTOP_DATABASE_possible="false"
if [ "\$UPDATE_DESKTOP_DATABASE_possible" = "true" ]; then
	update-desktop-database -q "$DATADIR/applications"
else
	echo "Could not execute command 'update-desktop-database -q $DATADIR/applications'."
fi

# Selfdestruction:
if [ -w "$BINDIR/uninstall-$NAME" ]; then
	rm -f "$BINDIR/uninstall-$NAME"
fi
EOF
	"$CHMOD" 755 "$BINDIR/uninstall-$NAME"
fi

# List pathes of installed files and of files included in installed
# directories, if $VERBOSE_MODE is not set 'false':
if [ "$VERBOSE_MODE" != "false" ]; then
	echo "`tput smul`Files of package '$NAME'`tput sgr0`"
	if [ -e "$BINDIR/$NAME" ]; then
		echo "$BINDIR/$NAME"
	fi
	if [ -e "$BINDIR/uninstall-$NAME" ]; then
		echo "$BINDIR/uninstall-$NAME"
	fi
	if [ -e "$LIBDIR/$NAME/jni/libgluegen-rt.so" ]; then
		echo "$LIBDIR/$NAME/jni/libgluegen-rt.so"
	fi
	if [ -e "$LIBDIR/$NAME/jni/libjogl.so" ]; then
		echo "$LIBDIR/$NAME/jni/libjogl.so"
	fi
	if [ -e "$LIBDIR/$NAME/jni/libjogl_awt.so" ]; then
		echo "$LIBDIR/$NAME/jni/libjogl_awt.so"
	fi
	if [ -e "$DATADIR/applications/$NAME.desktop" ]; then
		echo "$DATADIR/applications/$NAME.desktop"
	fi
	if [ -e "$DOCDIR/packages/$NAME/_LICENSE.txt" ]; then
		echo "$DOCDIR/packages/$NAME/_LICENSE.txt"
	fi
	if  [ -e "$DATADIR/$NAME/$NAME" ]; then
		echo "$DATADIR/$NAME/$NAME"
	fi
	for FILE in `echo $JARS | sed 's/ / /g'`; do
		if [ -e "$DATADIR/$NAME/$FILE" ]; then
			echo "$DATADIR/$NAME/$FILE"
		fi
	done
	for SIZE in 16x16 22x22 32x32 48x48 64x64 128x128 256x256; do
		if [ -e "$DATADIR/icons/hicolor/$SIZE/apps/$NAME.png" ]; then
			echo "$DATADIR/icons/hicolor/$SIZE/apps/$NAME.png"
		fi
	done
fi
