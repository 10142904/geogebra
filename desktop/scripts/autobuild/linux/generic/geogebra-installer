#!/bin/bash
#---------------------------------------------
# Script to install GeoGebra
#---------------------------------------------

#---------------------------------------------
# Used environment variables:
#
# NAME=<name of geogebra start script> # If unset, 'geogebra' will be used. (Example: 'geogebra5-beta')
#
# DESCRIPTION=<application name shown by desktop file> # If unset, 'GeoGebra' will be used. (Example: 'GeoGebra 5.0 Beta')
#
# ARCH=[<32>|<64>] # If unset, the architecture (32bit/64bit) will be determined.
#
# BINDIR=<path for executable binary files> # If unset, 'usr/bin' or '$HOME/bin' will be used.
#
# USE_ABSOLUTE_PATH_OF_BINDIR=<boolean> # If unset, the needed value will be determined depending on whether $BINDIR is in $PATH.
#
# DATADIR=<path for data files> # If unset, '/usr/share' or '$HOME/.local/share' will be used.
#
# DOCDIR=<path for doc files> # If unset, '/usr/share/doc' or '$HOME/.local/share/doc' will be used.
#
# LIBDIR=<path for libraries> # If unset, '/usr/lib' ('/usr/lib64') or "$HOME/.local/lib" ("$HOME/.local/lib64") will be used.
#
# KDEDATADIR=<path for KDE data files> # If unset, '/usr/share' or "$HOME/.kde4/share" will be used.
#
# KDELIBDIR=<path for KDE libraries> # If unset, '/usr/lib' ('/usr/lib64') or "$HOME/.kde4/lib" ("$HOME/.kde4/lib64") will be used.
#
# CREATE_UNINSTALLER=<boolean> # If unset, 'true' will be used. (Distributors normally have their own uninstaller.)
#
# VERBOSE_MODE=<boolean> # If unset, 'true' will be used.

#---------------------------------------------
# Check, if use of kdialog, qdbus, zenity or Xdialog is possible.

KDIALOG_possible="false"
QDBUS_possible="false"
ZENITY_possible="false"
XDIALOG_possible="false"
if [ "$UID" != "0" ]; then
	KDIALOG_possible="true"
	type -P kdialog &>/dev/null || KDIALOG_possible="false"
	if [ "$KDIALOG_possible" = "true" ]; then
		QDBUS_possible="true"
		type -P qdbus &>/dev/null || QDBUS_possible="false"
	else
		ZENITY_possible="true"
		type -P zenity &>/dev/null || ZENITY_possible="false"
		if [ "$ZENITY_possible" = "false" ]; then
			XDIALOG_possible="true"
			type -P Xdialog &>/dev/null || XDIALOG_possible="false"
		fi
	fi
fi

#---------------------------------------------
# Determine path of this script and put it into $THIS_PATH.

THIS_PATH="${BASH_SOURCE[0]}"
if [ -h "${THIS_PATH}" ]; then
	while [ -h "${THIS_PATH}" ]; do
		THIS_PATH=`readlink "${THIS_PATH}"`
	done
fi
pushd . > /dev/null
cd `dirname ${THIS_PATH}` > /dev/null
THIS_PATH=`pwd`
popd > /dev/null

#---------------------------------------------
# Read config file (if exists).

if [ -e "$THIS_PATH/geogebra-installer.conf" ]; then
	. "$THIS_PATH/geogebra-installer.conf"
fi

#---------------------------------------------
# If $NAME not set, use 'geogebra'.

if [ -z "$NAME" ]; then
	export NAME='geogebra'
fi

#---------------------------------------------
# If $DESCRIPTION not set, use 'GeoGebra'.

if [ -z "$DESCRIPTION" ]; then
	export DESCRIPTION='GeoGebra'
fi

#---------------------------------------------
# If $ARCH not set, determine it.

if [ -z "$ARCH" ]; then
	if [ "`getconf LONG_BIT`" = "64" ]; then
		export ARCH='64'
	else
		export ARCH='32'
	fi
fi

#---------------------------------------------
# If $BINDIR not set, use '/usr/bin' or "$HOME/bin".

if [ -z "$BINDIR" ]; then
	if [ -w '/usr/bin' ]; then
		export BINDIR='/usr/bin'
	else
		export BINDIR="$HOME/bin"
	fi
fi

#---------------------------------------------
# If $USE_ABSOLUTE_PATH_OF_BINDIR not set, determine which value is needed and ask for $BINDIR, if not in $PATH.

if [ -z "$USE_ABSOLUTE_PATH_OF_BINDIR" ]; then
	if [[ ":$PATH:" == *":$BINDIR:"* ]]; then
		export USE_ABSOLUTE_PATH_OF_BINDIR='false'
	else
		if [ "$KDIALOG_possible" = "true" ]; then
			export BINDIR=`kdialog --caption "$DESCRIPTION" --icon "$THIS_PATH/icons/hicolor/64x64/apps/$NAME.png" --inputbox "Please specify the path of the directory, in which the executable files should be installed:" "$BINDIR"`
		elif [ "$ZENITY_possible" = "true" ]; then
			export BINDIR=`zenity --title="$DESCRIPTION" --window-icon="$THIS_PATH/icons/hicolor/64x64/apps/$NAME.png" --entry --text="Please specify the path of the directory, in which the executable files should be installed:" --entry-text="$BINDIR"`
		elif [ "$XDIALOG_possible" = "true" ]; then
			export BINDIR=`Xdialog --title "$DESCRIPTION" --inputbox "Please specify the path of the directory, in which the executable files should be installed:" 0 0 "$BINDIR" 3>&1 1>&2 2>&3`
		else
			export BINDIR=`dialog --title "$DESCRIPTION" --inputbox "Please specify the path of the directory, in which the executable files should be installed:" 0 0 "$BINDIR" 3>&1 1>&2 2>&3`
			clear
		fi
		if [[ ":$PATH:" == *":$BINDIR:"* ]]; then
			export USE_ABSOLUTE_PATH_OF_BINDIR='false'
		else
			export USE_ABSOLUTE_PATH_OF_BINDIR='true'
		fi
	fi
fi

#---------------------------------------------
# If $DATADIR not set, use '/usr/share' or "$HOME/.local/share".

if [ -z "$DATADIR" ]; then
	if [ -w "/usr/share" ]; then
		export DATADIR="/usr/share"
	else
		export DATADIR="$HOME/.local/share"
	fi
fi

#---------------------------------------------
# If $DOCDIR not set, use '/usr/share/doc' or "$HOME/.local/share/doc".

if [ -z "$DOCDIR" ]; then
	if [ -w "/usr/share" ]; then
		export DOCDIR='/usr/share/doc'
	else
		export DOCDIR="$HOME/.local/share/doc"
	fi
fi

#---------------------------------------------
# If $LIBDIR not set and $ARCH set '64', try to determine it, otherwise
# use '/usr/lib' or "$HOME/.local/lib".

if [ -z "$LIBDIR" ]; then
	if [ "$ARCH" = '64' -a -e "/usr/lib64" ]; then
		if [ -w "/usr/lib64" ]; then
			export LIBDIR='/usr/lib64'
		else
			export LIBDIR="$HOME/.local/lib64"
		fi
	else
		if [ -w "/usr/lib" ]; then
			export LIBDIR='/usr/lib'
		else
			export LIBDIR="$HOME/.local/lib"
		fi
	fi
fi

#---------------------------------------------
# If $KDEDATADIR not set, use '/usr/share' or "$HOME/.kde4/share".

if [ -z "$KDEDATADIR" ]; then
	if [ -w '/usr/share' ]; then
		export KDEDATADIR='/usr/share'
	else
		export KDEDATADIR="$HOME/.kde4/share"
	fi
fi

#---------------------------------------------
# If $KDELIBDIR not set and $ARCH set '64', try to determine it, otherwise
# use '/usr/lib' or "$HOME/.kde4/lib".

if [ -z "$KDELIBDIR" ]; then
	if [ "$ARCH" = '64' -a -e "/usr/lib64" ]; then
		if [ -w "/usr/lib64" ]; then
			export KDELIBDIR='/usr/lib64'
		else
			export KDELIBDIR="$HOME/.kde4/lib64"
		fi
	else
		if [ -w "/usr/lib" ]; then
			export KDELIBDIR='/usr/lib'
		else
			export KDELIBDIR="$HOME/.kde4/lib"
		fi
	fi
fi

#---------------------------------------------
# If $CREATE_UNINSTALLER not set, use 'true'.

if [ -z "$CREATE_UNINSTALLER" ]; then
	export CREATE_UNINSTALLER="true"
fi

#---------------------------------------------
# If $VERBOSE_MODE not set, use 'true'.

if [ -z "$VERBOSE_MODE" ]; then
	export VERBOSE_MODE="true"
fi

#---------------------------------------------
# Install everything.

cd "$THIS_PATH"

# Ask to continue:
ANSWER=1
if [ "$KDIALOG_possible" = "true" ]; then
	kdialog --caption "$DESCRIPTION" --icon "$THIS_PATH/icons/hicolor/64x64/apps/$NAME.png" --warningcontinuecancel "$DESCRIPTION will be installed into \"$DATADIR\"."
	ANSWER=$?
elif [ "$ZENITY_possible" = "true" ]; then
	zenity --title="$DESCRIPTION" --window-icon="$THIS_PATH/icons/hicolor/64x64/apps/$NAME.png" --warning --text="$DESCRIPTION will be installed into \"$DATADIR\"."
	ANSWER=$?
elif [ "$XDIALOG_possible" = "true" ]; then
	Xdialog --title "$DESCRIPTION" --yesno "$DESCRIPTION will be installed into \"$DATADIR\".\n\nDo you want to continue?" 0 0
	ANSWER=$?
else
	echo "$DESCRIPTION will be installed into \"$DATADIR\"."
	tput bold
	read -p "Do you want to continue? [y/n]: "
	tput sgr0
	case "$REPLY" in
	y | Y | yes | Yes | YES )
		ANSWER=0 ;;
	esac
fi
if [ $ANSWER != 0 ]; then
	exit 0
fi

# Ask for installation of other packages:
INSTALL_geogebra_oxygen_icons=1
INSTALL_geogebra_thumbnail_gtk=1
INSTALL_geogebra_thumbnail_kde=1
if [ "$KDIALOG_possible" = "true" ]; then
	ANSWERS=`kdialog --caption "$DESCRIPTION" --icon "$THIS_PATH/icons/hicolor/64x64/apps/$NAME.png" --separate-output --checklist "Select additional software packages, you want to install:" 1 "GeoGebra Icons for Oxygen Icon Theme" off 2 "GTK+ Thumbnail Creator for GeoGebra files" off 3 "KDE Thumbnail Creator for GeoGebra files" off`
	for ANSWER in $ANSWERS; do
		if [ "$ANSWER" = "1" ]; then
			INSTALL_geogebra_oxygen_icons=0
		fi
		if [ "$ANSWER" = "2" ]; then
			INSTALL_geogebra_thumbnail_gtk=0
		fi
		if [ "$ANSWER" = "3" ]; then
			INSTALL_geogebra_thumbnail_kde=0
		fi
	done
elif [ "$ZENITY_possible" = "true" ]; then
	ANSWERS=`zenity --title="$DESCRIPTION" --window-icon="$THIS_PATH/icons/hicolor/64x64/apps/$NAME.png" --list --text="Select additional software packages, you want to install:" --column="" --column="key" --column="package" --checklist --separator=" " --multiple --hide-column="2" --hide-header "false" "1" "GeoGebra Icons for Oxygen Icon Theme" "false" "2" "GTK+ Thumbnail Creator for GeoGebra files" "false" "3" "KDE Thumbnail Creator for GeoGebra files"`
	for ANSWER in $ANSWERS; do
		if [ "$ANSWER" = "1" ]; then
			INSTALL_geogebra_oxygen_icons=0
		fi
		if [ "$ANSWER" = "2" ]; then
			INSTALL_geogebra_thumbnail_gtk=0
		fi
		if [ "$ANSWER" = "3" ]; then
			INSTALL_geogebra_thumbnail_kde=0
		fi
	done
elif [ "$XDIALOG_possible" = "true" ]; then
	ANSWERS=`Xdialog --title "$DESCRIPTION" --checklist "Select additional software packages, you want to install:" 0 0 0 1 "GeoGebra Icons for Oxygen Icon Theme" off 2 "GTK+ Thumbnail Creator for GeoGebra files" off 3 "KDE Thumbnail Creator for GeoGebra files" off 3>&1 1>&2 2>&3`
	for ANSWER in `echo $ANSWERS | sed 's/\// /g'`; do
		if [ "$ANSWER" = "1" ]; then
			INSTALL_geogebra_oxygen_icons=0
		fi
		if [ "$ANSWER" = "2" ]; then
			INSTALL_geogebra_thumbnail_gtk=0
		fi
		if [ "$ANSWER" = "3" ]; then
			INSTALL_geogebra_thumbnail_kde=0
		fi
	done
else
	ANSWERS=`dialog --title "$DESCRIPTION" --checklist "Select additional software packages, you want to install:" 0 0 0 1 "GeoGebra Icons for Oxygen Icon Theme" off 2 "GTK+ Thumbnail Creator for GeoGebra files" off 3 "KDE Thumbnail Creator for GeoGebra files" off 3>&1 1>&2 2>&3`
	clear
	for ANSWER in `echo $ANSWERS | sed 's/"/ /g'`; do
		if [ "$ANSWER" = "1" ]; then
			INSTALL_geogebra_oxygen_icons=0
		fi
		if [ "$ANSWER" = "2" ]; then
			INSTALL_geogebra_thumbnail_gtk=0
		fi
		if [ "$ANSWER" = "3" ]; then
			INSTALL_geogebra_thumbnail_kde=0
		fi
	done
fi

# Install files and show progressbar during installation, if possible:
if [ "$KDIALOG_possible" = "true" -a "$QDBUS_possible" = "true" ]; then
	NUMBER_OF_PACKAGES=2
	if [ "$INSTALL_geogebra_oxygen_icons" = 0 ]; then
		NUMBER_OF_PACKAGES=$((NUMBER_OF_PACKAGES + 1))
	fi
	if [ "$INSTALL_geogebra_thumbnail_gtk" = 0 ]; then
		NUMBER_OF_PACKAGES=$((NUMBER_OF_PACKAGES + 1))
	fi
	if [ "$INSTALL_geogebra_thumbnail_kde" = 0 ]; then
		NUMBER_OF_PACKAGES=$((NUMBER_OF_PACKAGES + 1))
	fi
	DBUSREF=`kdialog --caption "$DESCRIPTION" --icon "$THIS_PATH/icons/hicolor/64x64/apps/$NAME.png" --progressbar "Installing the Mime database for GeoGebra files." $NUMBER_OF_PACKAGES`
fi
"$THIS_PATH/install-geogebra-mime-data"
if [ "$KDIALOG_possible" = "true" -a "$QDBUS_possible" = "true" ]; then
	qdbus $DBUSREF Set "" value 1 >/dev/null
	qdbus $DBUSREF setLabelText "Installing $DESCRIPTION." >/dev/null
fi
"$THIS_PATH/install-geogebra"
if [ "$KDIALOG_possible" = "true" -a "$QDBUS_possible" = "true" ]; then
	qdbus $DBUSREF Set "" value 2 >/dev/null
	PACKAGE_NUMBER=3
fi

# Install other packages, if wanted:
if [ "$INSTALL_geogebra_oxygen_icons" = 0 ]; then
	if [ "$KDIALOG_possible" = "true" -a "$QDBUS_possible" = "true" ]; then
		qdbus $DBUSREF setLabelText "Installing GeoGebra Icons for Oxygen Icon Theme." >/dev/null
	fi
	"$THIS_PATH/install-geogebra-oxygen-icons"
	if [ "$KDIALOG_possible" = "true" -a "$QDBUS_possible" = "true" ]; then
		qdbus $DBUSREF Set "" value $PACKAGE_NUMBER >/dev/null
		PACKAGE_NUMBER=$((PACKAGE_NUMBER + 1))
	fi
fi
if [ "$INSTALL_geogebra_thumbnail_gtk" = 0 ]; then
	if [ "$KDIALOG_possible" = "true" -a "$QDBUS_possible" = "true" ]; then
		qdbus $DBUSREF setLabelText "Installing the GTK+ Thumbnail Creator for GeoGebra files." >/dev/null
	fi
	"$THIS_PATH/install-geogebra-thumbnail-gtk"
	if [ "$KDIALOG_possible" = "true" -a "$QDBUS_possible" = "true" ]; then
		qdbus $DBUSREF Set "" value $PACKAGE_NUMBER >/dev/null
		PACKAGE_NUMBER=$((PACKAGE_NUMBER + 1))
	fi
fi
if [ "$INSTALL_geogebra_thumbnail_kde" = 0 ]; then
	if [ "$KDIALOG_possible" = "true" -a "$QDBUS_possible" = "true" ]; then
		qdbus $DBUSREF setLabelText "Installing the KDE Thumbnail Creator for GeoGebra files." >/dev/null
	fi
	"$THIS_PATH/install-geogebra-thumbnail-kde"
	if [ "$KDIALOG_possible" = "true" -a "$QDBUS_possible" = "true" ]; then
		qdbus $DBUSREF Set "" value $PACKAGE_NUMBER >/dev/null
	fi
fi
if [ "$KDIALOG_possible" = "true" -a "$QDBUS_possible" = "true" ]; then
	qdbus $DBUSREF setLabelText "Installation completed." >/dev/null
	qdbus $DBUSREF close >/dev/null
fi

# Run update-mime-database, if possible:
UPDATE_MIME_DATABASE_possible="true"
type -P update-mime-database &>/dev/null || UPDATE_MIME_DATABASE_possible="false"
if [ "$UPDATE_MIME_DATABASE_possible" = "true" ]; then
	update-mime-database "$DATADIR/mime" >/dev/null
else
	echo "Could not execute command 'update-mime-database $DATADIR/mime'."
fi

# Run update-desktop-database, if possible:
UPDATE_DESKTOP_DATABASE_possible="true"
type -P update-desktop-database &>/dev/null || UPDATE_DESKTOP_DATABASE_possible="false"
if [ "$UPDATE_DESKTOP_DATABASE_possible" = "true" ]; then
	update-desktop-database -q "$DATADIR/applications"
else
	echo "Could not execute command 'update-desktop-database -q $DATADIR/applications'."
fi

# Print run command:
if [ "$USE_ABSOLUTE_PATH_OF_BINDIR" = 'true' ]; then
	echo "Run `tput bold`$BINDIR/$NAME`tput sgr0` to start $DESCRIPTION. Use option --help for more information."
else
	echo "Run `tput bold`$NAME`tput sgr0` to start $DESCRIPTION. Use option --help for more information."
fi

# Print uninstall command, if $CREATE_UNINSTALLER is not set 'false":
if [ "$CREATE_UNINSTALLER" != "false" ]; then
	if [ "$USE_ABSOLUTE_PATH_OF_BINDIR" = 'true' ]; then
		echo "Run `tput bold`$BINDIR/uninstall-$NAME`tput sgr0` to uninstall $DESCRIPTION."
	else
		echo "Run `tput bold`uninstall-$NAME`tput sgr0` to uninstall $DESCRIPTION."
	fi
	if [ "$KDIALOG_possible" = "true" ]; then
		if [ "$USE_ABSOLUTE_PATH_OF_BINDIR" = 'true' ]; then
			kdialog --caption "$DESCRIPTION" --icon "$THIS_PATH/icons/hicolor/64x64/apps/$NAME.png" --msgbox "Installation completed.\n\nPlease make sure that you have a Java Runtime Environment (JRE) installed, before you start $DESCRIPTION. To get more information, run the following command:\n\n$BINDIR/$NAME --help\n\nIf you want to uninstall $DESCRIPTION, run the following command:\n\n$BINDIR/uninstall-$NAME"
		else
			kdialog --caption "$DESCRIPTION" --icon "$THIS_PATH/icons/hicolor/64x64/apps/$NAME.png" --msgbox "Installation completed.\n\nPlease make sure that you have a Java Runtime Environment (JRE) installed, before you start $DESCRIPTION. To get more information, run the following command:\n\n$NAME --help\n\nIf you want to uninstall $DESCRIPTION, run the following command:\n\nuninstall-$NAME"
		fi
	elif [ "$ZENITY_possible" = "true" ]; then
		if [ "$USE_ABSOLUTE_PATH_OF_BINDIR" = 'true' ]; then
			zenity --title="$DESCRIPTION" --window-icon="$THIS_PATH/icons/hicolor/64x64/apps/$NAME.png" --info --text="Installation completed.\n\nPlease make sure that you have a Java Runtime Environment (JRE) installed, before you start $DESCRIPTION. To get more information, run the following command:\n\n$BINDIR/$NAME --help\n\nIf you want to uninstall $DESCRIPTION, run the following command:\n\n$BINDIR/uninstall-$NAME"
		else
			zenity --title="$DESCRIPTION" --window-icon="$THIS_PATH/icons/hicolor/64x64/apps/$NAME.png" --info --text="Installation completed.\n\nPlease make sure that you have a Java Runtime Environment (JRE) installed, before you start $DESCRIPTION. To get more information, run the following command:\n\n$NAME --help\n\nIf you want to uninstall $DESCRIPTION, run the following command:\n\nuninstall-$NAME"
		fi
	elif [ "$XDIALOG_possible" = "true" ]; then
		if [ "$USE_ABSOLUTE_PATH_OF_BINDIR" = 'true' ]; then
			Xdialog --title "$DESCRIPTION" --msgbox "Installation completed.\n\nPlease make sure that you have a Java Runtime Environment (JRE) installed, before you start $DESCRIPTION.\nTo get more information, run the following command:\n\n$BINDIR/$NAME --help\n\nIf you want to uninstall $DESCRIPTION, run the following command:\n\n$BINDIR/uninstall-$NAME" 0 0
		else
			Xdialog --title "$DESCRIPTION" --msgbox "Installation completed.\n\nPlease make sure that you have a Java Runtime Environment (JRE) installed, before you start $DESCRIPTION.\nTo get more information, run the following command:\n\n$NAME --help\n\nIf you want to uninstall $DESCRIPTION, run the following command:\n\nuninstall-$NAME" 0 0
		fi
	fi
fi
