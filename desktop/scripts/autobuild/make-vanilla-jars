#!/bin/sh
# Creates "vanilla" JARs into ../../build for testing purposes.
# No cleanup is done before compilation by default.

set_bootclasspath () {
 test -r "$BOOTCLASSPATH" || {
  BOOTCLASSPATH="$JAVA_HOME"/jre/lib/rt.jar
  test -r "$BOOTCLASSPATH" || BOOTCLASSPATH="not set"
  }
 }

# 1. Start and loading configuration
test -r autobuild.conf && . ./autobuild.conf && echo "$0: Using autobuild.conf for overriding defaults"

# 2. Setting defaults
if [ "$SVNDIR" = "" ]; then
 ORIGDIR=`dirname $0`
 WORKDIR=`cd $ORIGDIR/../..; pwd`
else
 WORKDIR=`cd $SVNDIR/geogebra/desktop; pwd`
 fi

if [ "$JAVA_HOME" = "" ]; then
 JAVA_HOME="not set"
 fi
 
CLEAN=0
GRAMMAR=1
VERBOSE=0
CLASSES=1
RUN=0
TIDYUP=0
JOGL=1
PREPARE=0

BOOTCLASSPATH=`cd $WORKDIR/..; pwd`/java150-rt.jar
set_bootclasspath

# 3. Reading command line arguments
while [ $# -gt 0 ]; do
 case $1 in
  -h | -help | --help)
   echo "This script creates vanilla *.jar files from the GeoGebra source files."
   echo
   echo "Usage: $0 [options]"
   echo " Where options can be (defaults in parentheses):"
   echo "  -h, -help, --help         This help"
   echo "  -c, --clean               Do a cleanup first by removing *.class files"
   echo "  -J [version]              Set JOGL version for 5.0 ($JOGL)"
   echo "  -s [dir]                  Use dir for source directory ($WORKDIR)"
   echo "  -b [file]                 Set bootclasspath for ecj ($BOOTCLASSPATH)"
   echo "  -j [dir]                  Java home directory ($JAVA_HOME)"
   echo "  -ng, --no-grammar         Do not compile grammar with javacc"
   echo "  -nc, --no-classes         Do not (re)compile classes"
   echo "  -pr, --prepare-run        Prepare JARs for running (pre-jogling)"
   echo "  -r, --run                 Run GeoGebra after compilation (in background)"
   echo "  -tu, --tidy-up            Tidy up the build directory after compilation"
   echo "  -v, --verbose             Be verbose whenever possible"
   exit 0
   ;;

  -J)
   shift
   JOGL="$1"
   ;;

  -c | --clean)
   CLEAN=1
   ;;

  -r | --run)
   RUN=1
   ;;

  -pr | --prepare-run)
   PREPARE=1
   ;;

  -tu | --tidy-up)
   TIDYUP=1
   ;;

  -s)
   shift
   WORKDIR="$1"
   ;;

  -b)
   shift
   BOOTCLASSPATH="$1"
   set_bootclasspath
   ;;

  -j)
   shift
   JAVA_HOME="$1"
   test -x $JAVA_HOME/bin/java || {
    echo "Cannot find $JAVA_HOME/bin/java, is Java installed?"
    exit 31
    }
   if [ "$BOOTCLASSPATH" = "not set" ]; then
    set_bootclasspath
    fi
   ;;

  -ng | --no-grammar)
   GRAMMAR=0
   ;;
   
  -nc | --no-classes)
   CLASSES=0
   ;;
   
  -v | --verbose)
   VERBOSE=1
   ;;

  *)
   echo "Unknown parameter: $1. Use \"$0 -h\" for help."
   exit 32
   ;;

  esac
 shift
 done

# 4. Initial settings and checks
if [ "$JAVA_HOME" = "not set" ]; then
 echo "Java home is not set. Consider using -j followed by your selection of an item from this list:"
 export JVM_DIR=/usr/lib/jvm
 ls -1 $JVM_DIR | awk '{print "'$JVM_DIR'/" $0}'
 exit 41
 fi

if [ "$BOOTCLASSPATH" = "not set" ]; then
 echo "Bootclasspath is not set. Consult a Java guru to find it on your machine."
 exit 42
 fi

SRCVERSION=`cat ../../../common/src/geogebra/common/GeoGebraConstants.java \
 | grep "public static final String VERSION_STRING" | cut -f7 -d" " |\
 sed s/\"//g | sed s/";"// | cut -f1-2 -d.`

cd $WORKDIR

umask 0002 # trying to ensure g+w rights for all created files automatically

# 5. Setting global variables
export JAVA_HOME
export JDK_HOME=$JAVA_HOME
export JAVACMD=$JAVA_HOME/bin/java
export ANT_OPTS="-Xmx1024m"

# 6. Building

if [ "$VERBOSE" = 1 ]; then
 ANT="ant -v"
else
 ANT="ant"
 fi
ANT="$ANT -Djogl=$JOGL"

# 6/1. Cleanup on demand
if [ $CLEAN = 1 ]; then
 $ANT delete-classes
 fi

# 6/2. Compiling grammar
if [ $GRAMMAR = 1 ]; then
 $ANT compile-grammar-cl
 fi

# 6/2. Setting classpath for ecj (required for Java 5)
JOGLPATH=`cd ../jogl$JOGL; pwd`
CP=`cd scripts/autobuild; ./classpath`:`cd ../jogl$JOGL; ./classpath $JOGLPATH/`

# 6/3. Creating *.class files
if [ $CLASSES = 1 ]; then
 echo "$0: (Re)creating class files"
 COMMONJAVA=../common/src/geogebra/common/Common.java
 echo "$0: Putting away (renaming) $COMMONJAVA to avoid errors"
 mv $COMMONJAVA $COMMONJAVA.temporarily_renamed
 
 $JAVACMD $ANT_OPTS -jar lib/build/ecj-3.6.2.jar -1.5 -source 1.5 -target 1.5 -classpath $CP -bootclasspath $BOOTCLASSPATH\
  -time -proceedOnError -g ../desktop ../common/src/geogebra/common ../common/src/org ../common/src/geogebra/jung ../common/src/geogebra/jts ../jogl$JOGL/src > .ecjlog 2>&1
 tail -1 .ecjlog
 echo ", see .ecjlog for more details" # .ecjlog has no \n before EOF

 echo "$0: Putting back $COMMON"
 mv $COMMONJAVA.temporarily_renamed $COMMONJAVA
 fi

# 6.4 Downloading latest giac version for all available platforms
cd lib
for i in javagiac.dll javagiac64.dll libjavagiac.so libjavagiac64.so; do
 wget -N http://dev.geogebra.org/download/lib/giac/latest/$i
 done
# Getting the Mac files. Warning: the path is hardcoded for now!
for i in libgmp.10.dylib libjavagiac.jnilib
 wget -N http://dev.geogebra.org/download/lib/giac/20130624/$i
 done
zip javagiac-win32.jar javagiac.dll
zip javagiac-win64.jar javagiac64.dll
zip javagiac-linux32.jar libjavagiac.so
zip javagiac-linux64.jar libjavagiac64.so
zip javagiac-mac.jar libjavagiac.jnilib
cd ..

# 6/5. Packaging

$ANT ggb-jar-files3D || exit 3

# 6/6. Tidying up on demand
BUILDDIR=`cd $WORKDIR/build; pwd`
if [ $TIDYUP = 1 ]; then
 echo "Tidying up $BUILDDIR"
 for i in debug packed tempproperties unpacked unsigned; do
  rm -fR $BUILDDIR/$i
  done
 fi

# 7. Finish
if [ "$JOGL" = "1" ]; then
 EXTRA="-Djava.library.path=."
 fi
echo "Vanilla *.jar files are located in $BUILDDIR directory."
if [ $RUN = 0 -a $PREPARE = 0 ]; then
 echo "They cannot be used directly: they require jogling."
else
 cd "$BUILDDIR"
 mv geogebra.jar geogebra-jogl$JOGL.jar
 mv geogebra_3d.jar geogebra_3d-jogl$JOGL.jar
 if [ "$JOGL" = "1" ]; then
  mv gluegen-rt.jar gluegen-rt-jogl1.jar
  fi
 RUNCOMMAND="java $EXTRA -jar geogebra-jogl$JOGL.jar"
 if [ $RUN = 1 ]; then
  $RUNCOMMAND &
 else
  echo "Enter \"$RUNCOMMAND\" to run GeoGebra 5.0 JOGL$JOGL from command line."
  fi
 fi
