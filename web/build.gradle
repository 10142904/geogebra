description 'Parts of GeoGebra related to web platforms'

evaluationDependsOn(':common')
evaluationDependsOn(':ggbjdk')
evaluationDependsOn(':editor-web')
evaluationDependsOn(':web:dev')
evaluationDependsOn(':keyboard-web')


buildscript {
    dependencies {
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
        classpath 'de.aaschmid:gradle-cpd-plugin:1.1'
    }
}

ext.gwtCompilerVersion = project(':renderer-web').gwtCompilerVersion

apply plugin: 'gwt-compiler'
apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'de.aaschmid.cpd'

sourceCompatibility = 1.7
targetCompatibility = 1.7

sourceSets {
    nonfree
    gpl
    main {
        resources {
            if (project.hasProperty("usegpl")) {
                srcDirs += gpl.resources.srcDirs
            } else {
                srcDirs += nonfree.resources.srcDirs
            }
        }
    }
}

if(hasProperty("eclipse")){
    eclipse.classpath.sourceSets.removeAll { it.name == 'nonfree' || it.name == 'gpl'}
}

dependencies {
    compile project(':web:dev'), 
        project(':common'),
        project(':renderer-base'),
        project(':editor-base'),
        project(':renderer-web'),
        project(':editor-web'),
        project(':keyboard-web'),
        project(':ggbjdk'),
        files(project(':web:dev').sourceSets.main.allSource.srcDirs),
        files(project(':common').sourceSets.main.allSource.srcDirs),
        files(project(':ggbjdk').sourceSets.main.java.srcDirs),
        files(project(':editor-web').sourceSets.main.allSource.srcDirs),
        files(project(':keyboard-web').sourceSets.main.allSource.srcDirs),
        'com.googlecode.gwtphonegap:gwtphonegap:3.5.0.1',
        'com.googlecode:gwtgl:0.9.1',
        'com.googlecode:gwtgl:0.9.1:sources',
        "com.google.gwt:gwt-dev:$gwtCompilerVersion",
        'com.asual.lesscss:lesscss-engine:1.3.0'

    testCompile 'junit:junit:4.+', 'com.google.gwt.gwtmockito:gwtmockito:1.1.8', "com.google.gwt:gwt-user:$gwtCompilerVersion"
}

def devModule = project.findProperty("gmodule") ?: 'org.geogebra.web.SuperWeb'

ext.appSpecs = [[id:'classic', title:'Classic', exe:'GeoGebra', pkg:'GeoGebra_6.0', releases: 'Releases', icon: 'ggb.ico'],
	[id:'graphing', title:'Graphing Calculator', exe:'GeoGebraGraphing', pkg:'GeoGebra_Graphing', releases: 'Releases-graphing', icon: 'Graphing.ico'],
	[id:'3d', title:'3D Graphing Calculator'],
	[id:'cas', title:'CAS Calculator'],
	[id:'scientific', title:'Scientific Calculator'],
	[id:'geometry', title:'Geometry', exe:'GeoGebraGeometry', pkg:'GeoGebra_Geometry',  releases: 'Releases-geometry', icon: 'Geometry.ico'],
	[id:'notes', title:'Notes', exe:'MebisNotes', pkg:'Mebis_Notes',  releases: 'Releases-notes', icon: 'notes.ico', 'vendor': "Mebis"]]

gwt {
    gwtVersion = gwtCompilerVersion

    if (project.hasProperty("gmodule")) {
        modules = project.getProperty("gmodule").split(",")
    } else {
        modules = ['org.geogebra.web.Web3D', 'org.geogebra.web.WebSimple', 'org.geogebra.web.Web',
          'org.geogebra.web.Tablet3D', 'org.geogebra.web.TabletWin', 'org.geogebra.web.Solver']
    }
    
    devModules devModule
    
    maxHeapSize = '2000M'

    compiler {
        // Customize the GWT compiler here
        strict = true
        // enableClosureCompiler = true;        
        disableCastChecking = true
      
        if (project.hasProperty("greport")) {
           compileReport = true
        }
        
        //    logLevel = 'SPAM';
        if (project.hasProperty("gdraft")) {
            draftCompile = true
        }
        if (project.hasProperty("gworkers")) {
            localWorkers = project.getProperty("gworkers")
        }
        if (project.hasProperty("gdetailed")){
            style = de.richsource.gradle.plugins.gwt.Style.DETAILED
        } else {
            disableClassMetadata = true
        }
        if (project.hasProperty("gsoyc")) {
            soycDetailed = true
        }
        // style = de.richsource.gradle.plugins.gwt.Style.PRETTY;    
    }
}

tasks.withType(de.richsource.gradle.plugins.gwt.AbstractGwtActionTask) {
    jvmArgs '-Xss512M'
}
/*
configurations.all {
   resolutionStrategy {
       failOnVersionConflict()
       force "com.google.gwt:gwt-user:$gwtCompilerVersion"
       force "com.google.gwt:gwt-dev:$gwtCompilerVersion"
       force 'commons-io:commons-io:2.4'
       force 'commons-collections:commons-collections:3.2.2'
       force 'commons-logging:commons-logging:1.2'
       force 'org.ow2.asm:asm:5.0.3'
       force 'org.ow2.asm:asm-commons:5.0.3'
       force 'commons-codec:commons-codec:1.10'
       force 'org.eclipse.jetty:jetty-util:9.2.14.v20151106'
       force 'org.eclipse.jetty:jetty-io:9.2.14.v20151106'
       force 'xml-apis:xml-apis:1.4.01'
       force "com.google.gwt:gwt-servlet:$gwtCompilerVersion"
       force 'org.apache.commons:commons-lang3:3.5'
       force 'org.hamcrest:hamcrest-core:1.3'
   }
}
*/
def warDirRel = 'war'
def warDirAbs = file(warDirRel).toURI()
def outputs = ['web', 'web3d', 'webSimple', 'solver', 'tablet3d','tabletWin']

task cleanWar(type: Delete) {
    doLast {
      outputs.each { folder ->
          delete warDirRel + "/$folder"
      }
    }
}

task copyHtml {
    description 'Generate app.html, app-release.html, graphing.html and others'
    group 'application'
    doLast {
		copy {
			from file("../common/src/main/resources/giac")
			into warDirRel
		}
		copy {
			from file("src/main/resources/org/geogebra/web/resources/war")
			into warDirRel
		}
        String templateDir = "src/main/resources/org/geogebra/web/resources/html/"
        String html = file(templateDir + "app-template.html").text
        String splash = file(templateDir + "classic-splash.html").text
        
        ["algebra","graphics","spreadsheet","cas","probability","3d","exam"].each{
            def iconText = file("../common/src/nonfree/resources/org/geogebra/common/icons/svg/web/menuIconsTransparent/menu_view_"+it+".svg").text
            splash = splash.replace("<!--ICON:"+it.toUpperCase()+"-->", 
                "data:image/svg+xml;base64,"+iconText.bytes.encodeBase64().toString())

        }
        def classicHtml = { prerelease, offline ->
            
           def platformSpecific = offline ? "<!--PLATFORM SPECIFIC CODE--><script src=\"platform.js\"></script>" : "<!--LANGUAGE LINKS-->"
           return html.replace("<!--SPLASH-->", splash)
            .replace("<!--SPLASH STYLE-->", file(templateDir + "splash-style.css").text)
            .replace("<!--ICON-->", "//cdn.geogebra.org/apps/icons/geogebra.ico")
            .replace("<!--LANG-->", "en")
            .replace("<!--VENDOR-->", "GeoGebra")
            .replace("<!--PLATFORM SPECIFIC CODE-->", "<script>prerelease=${prerelease};appOnline=${!offline};</script>" + platformSpecific)
        }
        def appHtml = { appID, prerelease, offline=false, vendor="GeoGebra" ->
            def header = appID == "notes" ? "" : file(templateDir+"app-header-beta.html").text
            def platformSpecific = offline ? "<script src=\"platform.js\"></script>" : "<!--LANGUAGE LINKS-->"
            def stylesheet = prerelease ? "<link rel=\"stylesheet\" href=\"debug.css\"/>\n" :""
            def startscreenStyle = "startscreen" + (offline ? " offline" : "")
            return html.replace("<!--SPLASH-->", header + "<div class=\"$startscreenStyle\"><div class=\"logo\">"+file(templateDir+appID+"-min.svg").text+"</div>"+file(templateDir+appID+"-splash.html").text+"</div>")
            .replace("<!--SPLASH STYLE-->", file(templateDir+"app-header.css").text.replace('$height', offline ? '0' : '64px')+file(templateDir+"app-style.css").text)
            .replace("<!--PLATFORM SPECIFIC CODE-->", stylesheet + "<script>prerelease=${prerelease};appID=\"${appID}\";appOnline=${!offline};</script>" + platformSpecific)
            .replace("<!--ICON-->", "//cdn.geogebra.org/apps/icons/${appID}.ico")
            .replace("<!--VENDOR-->", vendor)
        }
        def english = {raw, appName ->
            return raw.replace("<!--HOME-->","Home").replace("<!--DOWNLOAD-->","Download")
            .replace("<!--APP NAME FULL-->", "GeoGebra ${appName}")
            .replace("<!--TRY APP-->", "Try App")
            .replace("<!--SIGN IN-->", "Sign in")
            .replace("<!--CONTINUE-->", "Continue")
            .replace("<!--APP NAME-->", appName)
            .replace("<!--LANG-->", "en")
        }
        
        file("war/app-release.html").text = english(classicHtml(false, false), "Classic")
        file("war/app.html").text = english(classicHtml(true, false), "Classic")
        file("war/app-offline.html").text = english(classicHtml(false, true), "Classic")
        file("war/classic-template.html").text = classicHtml(false, false)
        if(!file("war/debug.css").exists()){
            file("war/debug.css").text = "/** Put your temporary CSS here */"
        }
		appSpecs.each({app-> if(app.id != "classic") {
			// TODO notes features should go to stable, then we simplify this
			file("war/${app.id}-template.html").text = appHtml(app.id, "notes".equals(app.id))
			file("war/${app.id}-template-beta.html").text = appHtml(app.id, true)
			// TODO notes features should go to stable, then we simplify this
			file("war/${app.id}-offline.html").text = english(appHtml(app.id, "notes".equals(app.id), true, app.vendor ?: "GeoGebra"), app.title)
			file("war/${app.id}.html").text = english(appHtml(app.id, true), app.title)
			file("war/${app.id}-canary.html").text = english(appHtml(app.id, "\"canary\""), app.title)
		}});
    }
}

task createSolverHtml {
    String templateDir = "src/main/resources/org/geogebra/web/resources/html/"
    String solver = file(templateDir + "solver-template.html").text
            .replace("<!--HEADER-->", file(templateDir + "app-header-beta.html").text)
            .replace("<!--TRY APP-->", "Try App")
            .replace("<!--CONTINUE-->", "Continue")
            .replace("<!--SPLASH STYLE-->", file(templateDir+"app-header.css").text)
    // for server rendering
    file("war/solver-template.html").text = solver.replace("<!--APP TYPE-->", "solver")
    file("war/practice-template.html").text = solver.replace("<!--APP TYPE-->", "practice")
    // for direct use autotest
    file("war/solver.html").text = solver
            .replace("<!--APP NAME-->", "Math Solver")
            .replace("<!--APP TYPE-->", "solver")
            .replace("<!--LANGUAGE LINKS-->", "<script>codebase=\"./\"</script>")
    file("war/exercise.html").text = solver
            .replace("<!--APP NAME-->", "Exercise app")
            .replace("<!--APP TYPE-->", "practice")
            .replace("<!--LANGUAGE LINKS-->", "<script>codebase=\"./\"</script>")
}

task deployIntoWar(type: Copy, dependsOn: ['cleanWar','copyHtml', 'createSolverHtml']) {
    description 'Copies/updates the GWT production compilation directory (web3d, ...) to the war directory.'
    from compileGwt
    into warDirRel
}

task mergeDeploy(){
   description 'merge deploy.js and web3d.nocache.js'
   mustRunAfter 'compileGwt'
   doLast {
      def web3dPermutation = file("./build/gwt/out/web3d/deferredjs").listFiles()[0].name
      def webSimplePermutation = file("./build/gwt/out/webSimple/deferredjs").listFiles()[0].name
      def templateJs = "src/main/resources/org/geogebra/web/resources/js/deployggb-template.js"
      def deployText = file(templateJs).text.replace('%WEB3D_PERMUTATION%', web3dPermutation)
                          .replace('%WEBSIMPLE_PERMUTATION%', webSimplePermutation)
      deployText += file("./build/gwt/out/web3d/js/webfont.js").text
      file(warDirRel + "/deployggb.js").text = deployText.replace('%MODULE_BASE%','')
      file(warDirRel + "/deployggb-latest.js").text = deployText.replace('%MODULE_BASE%','https://cdn.geogebra.org/apps/latest/')
   }
}

task symlinkIntoWar(dependsOn: ['copyHtml']) {
    description 'Creates a symbolic link to the GWT production compilation directory (web3d, ...) in the war directory. [UNUSED]'
    doLast {
        outputs.each { folder ->
            ant.symlink(resource: "../build/gwt/out/$folder", link: file("war/$folder"), overwrite: true)
        }
    }
}

task draftSymlinkIntoWar(dependsOn: ['copyHtml']) {
    description 'Creates a symbolic link to the GWT draft compilation directory (web3d) in the war directory.'
    doLast {
        outputs.each { folder ->
            ant.symlink(resource: "../build/gwt/draftOut/$folder", link: file("war/$folder"), overwrite: true)
        }
    }
}

task draftDeployIntoWar(type: Copy, dependsOn: ['cleanWar','copyHtml']) {
    description 'Copies/updates the GWT draft compilation directory (web3d) to the war directory.'
    from draftCompileGwt
    into warDirRel
}

def appHtmlRel = 'app.html'
def appHtmlAbs = file("${warDirAbs}/${appHtmlRel}").toURI()

task run(dependsOn: 'deployIntoWar') {
    group 'application'
    description 'Runs GeoGebraWeb in the default web browser'
    doLast {
        java.awt.Desktop.desktop.browse appHtmlAbs
    }
}

task draftRun(dependsOn: 'draftDeployIntoWar') {
    group 'application'
    description 'Runs GeoGebraWeb draft in the default web browser'
    doLast {
        java.awt.Desktop.desktop.browse appHtmlAbs
    }
}

// As now this task doesn't finish until the java process exits.
// This causes some problems as the IDE cannot run any other tasks.
// https://issues.gradle.org/browse/GRADLE-1254
task runSuperDev(type: JavaExec, dependsOn: ['jar','copyHtml', 'createSolverHtml']) {
    description 'Starts a codeserver, and a simple webserver for development'
    main 'com.google.gwt.dev.DevMode'
    maxHeapSize '4096m'
    classpath ((configurations.compile as Set<String>) 
        + (sourceSets.main.allSource.srcDirs as Set<String>) 
        + (jar.archivePath as String))
    workingDir file(warDirRel)
    args '-logLevel', 'TRACE',
        '-codeServerPort', '9997',
        '-port', '8888',
        '-style', 'PRETTY',
        '-bindAddress', project.findProperty("gbind") ?: 'localhost',
        '-superDevMode',
        '-war', file(warDirRel),
        devModule
    systemProperty 'gwt.persistentunitcachedir', '../build/gwt/devModeCache'
}

task runCodeServer(type: JavaExec, dependsOn: ['jar','copyHtml', 'createSolverHtml']) {
	description 'Starts a codeserver'
	doFirst{
		file("./build/gwt/temp").mkdirs()
		file("./build/gwt/launcher").mkdirs()
	}
	main 'com.google.gwt.dev.codeserver.CodeServer'
	maxHeapSize '4096m'
	classpath ((configurations.compile as Set<String>)
		+ (sourceSets.main.allSource.srcDirs as Set<String>)
		+ (jar.archivePath as String))
	workingDir file(warDirRel)
	args '-logLevel', 'TRACE',
		'-port', '9876',
		'-style', 'PRETTY',
		'-bindAddress', project.findProperty("gbind") ?: 'localhost',
		'-workDir', file("./build/gwt/temp").getAbsolutePath(),
		'-launcherDir', file("./build/gwt/launcher").getAbsolutePath(),
		devModule
	systemProperty 'gwt.persistentunitcachedir', '../build/gwt/devModeCache'
}

task createDraftBundleZip (type: Zip) {
    description 'Creates the Math Apps Bundle file.'
    destinationDir = file(warDirRel)
    baseName = "geogebra-bundle"
    from compileGwt {
        include ("web3d/**")
        into "GeoGebra/HTML5/5.0"
    }
}

// https://issues.gradle.org/browse/GRADLE-2778
// http://discuss.gradle.org/t/javadoc-generation-failed-with-vaadin-dependency/2502/12
javadoc {
    options.addStringOption("sourcepath", "")
}

test {
    ignoreFailures = true
}

findbugs {
    ignoreFailures = true
    excludeFilter = file("config/findbugs.xml")
}

pmd {
     ignoreFailures = true
     ruleSets = []
     ruleSetFiles = files("config/pmd.xml")
}

cpd {
    ignoreFailures = true
    minimumTokenCount = 100
}

tasks.withType(de.aaschmid.gradle.plugins.cpd.Cpd) {
    exclude "**/*.html"
    exclude "**/*.jj"
    exclude "**/*.xml"
    exclude "**/*.svg"
}
