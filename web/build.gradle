description 'Parts of GeoGebra related to web platforms'

evaluationDependsOn(':common')
evaluationDependsOn(':ggbjdk')
evaluationDependsOn(':editor-web')
evaluationDependsOn(':web:dev')
evaluationDependsOn(':keyboard-web')


buildscript {
    dependencies {
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
    }
}

apply plugin: 'gwt-compiler'
apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'pmd'

sourceCompatibility = 1.6
targetCompatibility = 1.6

sourceSets {
    nonfree
    gpl
    main {
        resources {
            if (project.hasProperty("usegpl")) {
                srcDirs += gpl.resources.srcDirs
            } else {
                srcDirs += nonfree.resources.srcDirs
            }
        }
    }
}

dependencies {
    compile project(':web:dev'), 
        project(':common'),
        project(':renderer-base'),
        project(':editor-base'),
        project(':renderer-web'),
        project(':editor-web'),
        project(':keyboard-web'),
        project(':ggbjdk'),
        files(project(':web:dev').sourceSets.main.allSource.srcDirs),
        files(project(':common').sourceSets.main.allSource.srcDirs),
        files(project(':ggbjdk').sourceSets.main.java.srcDirs),
        files(project(':editor-web').sourceSets.main.allSource.srcDirs),
        files(project(':keyboard-web').sourceSets.main.allSource.srcDirs),
        'com.googlecode.gwtphonegap:gwtphonegap:3.5.0.1',
        'com.googlecode:gwtgl:0.9.1',
        'com.googlecode:gwtgl:0.9.1:sources',
        'com.google.gwt:gwt-dev:2.8.1',
        'com.asual.lesscss:lesscss-engine:1.3.0'
}

def devModule = 'org.geogebra.web.SuperWeb'

gwt {
    gwtVersion = '2.8.1'

    if (project.hasProperty("gmodule")) {
        modules = [project.getProperty("gmodule")]
    } else {
        modules = ['org.geogebra.web.Web3D', 'org.geogebra.web.WebSimple', 'org.geogebra.web.Web',
         'org.geogebra.web.Tablet', 'org.geogebra.web.Tablet3D', 'org.geogebra.web.TabletWin']
    }
    
    devModules devModule
    
    maxHeapSize = '2000M'

    compiler {
        // Customize the GWT compiler here
        strict = true;
        // enableClosureCompiler = true;        
        disableCastChecking = true;        
       	// logLevel = 'SPAM';
        if (project.hasProperty("gdraft")) {
            draftCompile = true
        }
        if (project.hasProperty("gdetailed")){
            style = de.richsource.gradle.plugins.gwt.Style.DETAILED;
        } else {
            disableClassMetadata = true;
        }
        // style = de.richsource.gradle.plugins.gwt.Style.PRETTY;    
    }
}

configurations.all {
   resolutionStrategy {
       failOnVersionConflict()
       force 'com.google.gwt:gwt-user:2.8.1'
       force 'com.google.gwt:gwt-dev:2.8.1'
       force 'commons-io:commons-io:2.4'
       force 'commons-collections:commons-collections:3.2.2'
       force 'commons-logging:commons-logging:1.2'
       force 'org.ow2.asm:asm:5.0.3'
       force 'org.ow2.asm:asm-commons:5.0.3'
       force 'commons-codec:commons-codec:1.10'
       force 'org.eclipse.jetty:jetty-util:9.2.14.v20151106'
       force 'org.eclipse.jetty:jetty-io:9.2.14.v20151106'
       force 'xml-apis:xml-apis:1.4.01'
       force 'com.google.gwt:gwt-servlet:2.8.1'
       force 'org.apache.commons:commons-lang3:3.5'
   }
}

def warDirRel = 'war'
def warDirAbs = file(warDirRel).toURI()
def outputs = ['web', 'web3d', 'webSimple', 'tablet', 'tablet3d','tabletWin']

task cleanWar(type: Delete) {
	doLast {
      outputs.each { folder ->
          delete warDirRel + "/$folder"
      }
    }
}

task copyHtml {
	description 'Generate app.html, app-release.html, graphing.html and others'
	group 'application'
	doLast {
		String templateDir = "src/main/resources/org/geogebra/web/resources/html/";
	    String html = file(templateDir+"app-template.html").text;
	    String classicHtml = html.replace("<!--SPLASH-->", file(templateDir+"classic-splash.html").text)
	      .replace("<!--SPLASH STYLE-->", file(templateDir+"splash-style.css").text)
	      .replace("<!--APP NAME-->","Classic")
	      .replace("<!--ICON-->","//cdn.geogebra.org/apps/icons/geogebra.ico")
	      .replace("<!--LANG-->","en");
	    def appHtml = { raw, appID, prerelease, offline = false ->
	    	def header = offline ? "" : file(templateDir+"app-header.html").text; 
	    	def platformSpecific = offline ? "<script src=\"platform.js\"></script>":"<!--LANGUAGE LINKS-->"
	    	return raw.replace("<!--SPLASH-->", header + "<div class=\"startscreen\"> <div class=\"logo\">"+file(templateDir+appID+"-min.svg").text+"</div></div>")
	    	.replace("<!--SPLASH STYLE-->", file(templateDir+"app-header.css").text)
	    	.replace("<!--PLATFORM SPECIFIC CODE-->","<script>prerelease=${prerelease};appID=\"${appID}\";</script>" + platformSpecific)
	    	.replace("<!--ICON-->","//cdn.geogebra.org/apps/icons/${appID}.ico");
	    }
	    def english = {raw, appName ->
	    	return raw.replace("<!--HOME-->","Home").replace("<!--DOWNLOAD-->","Download")
	        .replace("<!--APP NAME FULL-->", "GeoGebra ${appName}")
            .replace("<!--TRY APP-->", "Try App")
            .replace("<!--Continue-->", "Continue")
	        .replace("<!--APP NAME-->", appName)
	        .replace("<!--LANG-->", "en")
	    }
	    
	    file("war/app-release.html").text = classicHtml;
	    
	    file("war/app.html").text = classicHtml.replace("<!--PLATFORM SPECIFIC CODE-->","<script>prerelease=true;</script>");
	    
	    file("war/graphing-template.html").text = appHtml(html, "graphing", false);
	    file("war/geometry-template.html").text = appHtml(html, "geometry", false);
	    file("war/graphing-offline.html").text = english(appHtml(html, "graphing", false, true), "Graphing Calculator");
	    file("war/geometry-offline.html").text = english(appHtml(html, "geometry", false, true), "Geometry");
	  
	    file("war/calculator.html").text = english(appHtml(html, "calculator", true), "Scientific Calculator");
	    
	    file("war/graphing.html").text = english(appHtml(html, "graphing", true), "Graphing Calculator");
	    
	    file("war/geometry.html").text = english(appHtml(html, "geometry", true), "Geometry");
	    
	    file("war/3d.html").text = english(appHtml(html, "3d", true), "3D Graphing Calculator");
	    
	    file("war/whiteboard.html").text = english(appHtml(html, "whiteboard", true), "Whiteboard");
    }
}

task deployIntoWar(type: Copy, dependsOn: ['cleanWar','copyHtml']) {
    description 'Copies/updates the GWT production compilation directory (web3d, ...) to the war directory.'
    from compileGwt
    into warDirRel
}

task symlinkIntoWar(dependsOn: ['copyHtml']) {
    description 'Creates a symbolic link to the GWT production compilation directory (web3d, ...) in the war directory. [UNUSED]'
    doLast {
        outputs.each { folder ->
            ant.symlink(resource: "../build/gwt/out/$folder", link: file("war/$folder"), overwrite: true)
        }
    }
}

task draftSymlinkIntoWar(dependsOn: ['copyHtml']) {
    description 'Creates a symbolic link to the GWT draft compilation directory (web3d) in the war directory.'
    doLast {
        outputs.each { folder ->
            ant.symlink(resource: "../build/gwt/draftOut/$folder", link: file("war/$folder"), overwrite: true)
        }
    }
}

task draftDeployIntoWar(type: Copy, dependsOn: ['cleanWar','copyHtml']) {
    description 'Copies/updates the GWT draft compilation directory (web3d) to the war directory.'
    from draftCompileGwt
    into warDirRel
}

def appHtmlRel = 'app.html'
def appHtmlAbs = file("${warDirAbs}/${appHtmlRel}").toURI()

task run(dependsOn: 'deployIntoWar') {
	group 'application'
    description 'Runs GeoGebraWeb in the default web browser'
    doLast {
        java.awt.Desktop.desktop.browse appHtmlAbs
    }
}

task draftRun(dependsOn: 'draftDeployIntoWar') {
	group 'application'
    description 'Runs GeoGebraWeb draft in the default web browser'
    doLast {
        java.awt.Desktop.desktop.browse appHtmlAbs
    }
}

// As now this task doesn't finish until the java process exits.
// This causes some problems as the IDE cannot run any other tasks.
// https://issues.gradle.org/browse/GRADLE-1254
task runSuperDev(type: JavaExec, dependsOn: ['jar','copyHtml']) {
    description 'Starts a codeserver, and a simple webserver for development'
    main 'com.google.gwt.dev.DevMode'
    maxHeapSize '2048m'
    classpath ((configurations.compile as Set<String>) 
        + (sourceSets.main.allSource.srcDirs as Set<String>) 
        + (jar.archivePath as String))
    workingDir file(warDirRel)
    args '-logLevel', 'INFO',
        '-codeServerPort', '9997',
        '-port', '8888',
        '-bindAddress', project.findProperty("gbind") ?: '127.0.0.1',
        '-superDevMode',
        '-war', file(warDirRel),
        devModule
    systemProperty 'gwt.persistentunitcachedir', '../build/gwt/devModeCache'
}

// https://issues.gradle.org/browse/GRADLE-2778
// http://discuss.gradle.org/t/javadoc-generation-failed-with-vaadin-dependency/2502/12
javadoc {
    options.addStringOption("sourcepath", "")
}

test {
    ignoreFailures = true
}

findbugs {
    ignoreFailures = true
    excludeFilter = file("src/main/config/findbugs.xml")
}

pmd {
     ignoreFailures = true
     ruleSets = []
     ruleSetFiles = files("src/main/config/pmd.xml")
}
