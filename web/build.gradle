project.setDescription('Parts of GeoGebra related to web platforms')

buildscript {
	repositories {
		jcenter()
        dependencies {
        	classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
		}
	}
}

apply plugin: 'gwt-compiler'
apply plugin: 'java'

sourceCompatibility = 1.6
targetCompatibility = 1.6

repositories {
	mavenCentral()
	maven {
		url 'http://dev.geogebra.org/maven2'
	}
}

dependencies {
	compile project(':web:dev'), 
		project(':common'),
		project(':ggbjdk'),
		files(project(':common').sourceSets.main.allSource.srcDirs),
		files(project(':ggbjdk').sourceSets.main.java.srcDirs),
		'com.google.apis:google-api-services-drive:v1-rev118-1.15.0-rc',
		'com.google.apis:google-api-services-oauth2:v2-rev39-1.15.0-rc',
		'com.google.api:gwt-oauth2:0.2',
		'com.googlecode.gwtphonegap:gwtphonegap:3.5.0.1',
		'com.googlecode.gwtquery:gwtquery:1.4.3',
		'com.googlecode:gwtgl:0.9.1',
		'com.googlecode:gwtgl:0.9.1:sources',
	    'org.scilab.forge:jlatexmath-gwt:20150429:all'

}

def devModule = 'org.geogebra.web.Web3D'

gwt {
	gwtVersion = '2.7.0'
	modules = ['org.geogebra.web.Web3D', 'org.geogebra.web.WebSimple', 'org.geogebra.web.Web',  
 	                'org.geogebra.web.Tablet', 'org.geogebra.web.Tablet3D']
	devModules devModule
	maxHeapSize = '1500M'

	compiler {
		// Customize the GWT compiler here
		// strict = true;
        // enableClosureCompiler = true;
        disableClassMetadata = true;
        disableCastChecking = true;
        //logLevel = 'ALL';
        // style = de.richsource.gradle.plugins.gwt.Style.DETAILED;
        // style = de.richsource.gradle.plugins.gwt.Style.PRETTY;
        
	}
}

configurations.all {
   resolutionStrategy {
       failOnVersionConflict()
       force 'com.google.gwt:gwt-user:2.7.0'
       force 'com.google.gwt:gwt-dev:2.7.0'
   }
}

def warDirRel = 'war'
def warDirAbs = file(warDirRel).toURI()

task cleanWar(type: Delete){
	delete warDirRel + '/web3d', warDirRel + '/web', warDirRel + '/webSimple', warDirRel + '/tablet', warDirRel + '/tablet3d'
}

task deployIntoWar(type: Copy, dependsOn: cleanWar) {
	description 'Copies/updates the GWT production compilation directory (web3d, ...) to the war directory.'
	from compileGwt
	into warDirRel
}

task symlinkIntoWar {
	description 'Creates a symbolic link to the GWT production compilation directory (web3d, ...) in the war directory.'
	doLast {
	    ['web', 'web3d', 'webSimple', 'tablet', 'tablet3d'].each { folder ->
		ant.symlink(resource: "../build/gwt/out/$folder", link: "war/$folder", overwrite: true)
		}
	    }
}

task draftDeployIntoWar(type: Copy, dependsOn: cleanWar) {
	description 'Copies/updates the GWT draft compilation directory (web3d) to the war directory.'
	from draftCompileGwt
	into warDirRel
}

def appHtmlRel = 'app.html'
def appHtmlAbs = file("${warDirAbs}/${appHtmlRel}").toURI()

task run(dependsOn: 'deployIntoWar') {
	description 'Runs GeoGebraWeb in the default web browser'
	doLast {
		java.awt.Desktop.desktop.browse appHtmlAbs
	}
}

task draftRun(dependsOn: 'draftDeployIntoWar') {
	description 'Runs GeoGebraWeb draft in the default web browser'
	doLast {
		java.awt.Desktop.desktop.browse appHtmlAbs
	}
}

// As now this task doesn't finish until the java process exits.
// This causes some problems as the IDE cannot run any other tasks.
// https://issues.gradle.org/browse/GRADLE-1254
task runSuperDev(type: JavaExec, dependsOn: 'jar') {
	description 'Starts a codeserver, and a simple webserver for development'
	main 'com.google.gwt.dev.DevMode'
	maxHeapSize '2048m'
	classpath ((configurations.compile as Set<String>) + (sourceSets.main.allSource.srcDirs as Set<String>) + (jar.archivePath as String))
	workingDir file(warDirRel)
	args '-logLevel', 'INFO',
		'-codeServerPort', '9997',
		'-port', '8888',
		'-superDevMode',
		'-war', file(warDirRel),
		devModule
}

// https://issues.gradle.org/browse/GRADLE-2778
// http://discuss.gradle.org/t/javadoc-generation-failed-with-vaadin-dependency/2502/12
javadoc {
        options.addStringOption("sourcepath", "")
    }
