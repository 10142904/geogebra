#!/bin/sh
# Compiles GeoGebraWeb (or the touch version) via command line.
# @author Zoltan Kovacs <zoltan@geogebra.org>
# Make sure that you run this script from its directory.

# 0. Functions first

# Cleanup
cleanup() {
 LASTEXITCODE=$?
 echo "* Got $1 signal with exit code $LASTEXITCODE..."
 # Maybe this code could be simplified since the EXIT signal will not be trapped.
 test -r $WEBDIR/src/geogebra/Web.gwt.xml.orig && {
  echo "* Cleaning up: putting back original Web.gwt.xml"
  cd $WEBDIR/src/geogebra
  mv Web.gwt.xml.orig Web.gwt.xml
  }
 cd $WEBDIR/src/geogebra
 for i in *; do
  test -L $i && {
   echo "* Cleaning up: removing link to $i"
   rm $i
   }
  done

 trap 0 # do not do a second cleanup now

 exit $LASTEXITCODE
}

# This will catch the signal number as well,
# taken from http://stackoverflow.com/a/2183063
trapper() {
 for i; do
  trap "cleanup $i" "$i"
 done
}

# Sets the classpath. This must be fine tuned
# and maybe tidied up a "bit", FIXME
classpath() {
if [ "$PROJECT" = "web" ]; then
CLASSPATH=\
$GGDIR/web/src:\
$GGDIR/common/src:\
$GGDIR/common/war/WEB-INF/lib:\
$GGDIR/common/src/geogebra/jre:\
$GGDIR/common/src/geogebra/webapache:\
$GGDIR/common/src/geogebra/jung:\
$GGDIR/common/src/geogebra/jts:\
$GGDIR/web/war/WEB-INF/classes:\
$GWTDIR/gwt-user.jar:\
$GWTDIR/gwt-dev.jar:\
$GWTDIR/validation-api-1.0.0.GA.jar:\
$GWTDIR/validation-api-1.0.0.GA-sources.jar:\
$GGDIR/common/test-classes:\
$GGDIR/common/war/WEB-INF/classes
fi

if [ "$PROJECT" = "touch" ]; then
CLASSPATH=\
$GGDIR/touch/src:\
$GGDIR/touch/resources:\
$GGDIR/common/src:\
$GGDIR/common/war/WEB-INF/lib:\
$GGDIR/common/src/geogebra/jre:\
$GGDIR/common/src/geogebra/webapache:\
$GGDIR/common/src/geogebra/jung:\
$GGDIR/common/src/geogebra/jts:\
$GGDIR/common/resources:\
$GGDIR/web/src:\
$GGDIR/touch/test-classes:\
$GGDIR/touch/war/WEB-INF/classes:\
$GGDIR/common/test-classes:\
$GGDIR/common/war/WEB-INF/classes:\
$GWTDIR/gwt-user.jar:\
$GWTDIR/gwt-dev.jar:\
$GWTDIR/validation-api-1.0.0.GA-sources.jar:\
$GWTDIR/validation-api-1.0.0.GA.jar:\
$GGDIR/touch/war/WEB-INF/lib/gwtphonegap-1.8.1.0.jar:\
$GGDIR/touch/war/WEB-INF/lib/lib-gwt-svg-0.5.6.jar:\
$GGDIR/touch/war/WEB-INF/lib/mgwt-1.1.2.jar:\
$GGDIR/web/war/WEB-INF/classes:\
$GGDIR/web/lib/gwt-oauth2-0.2-alpha.jar:\
$GGDIR/web/war/WEB-INF/lib/commons-logging-1.1.1.jar:\
$GGDIR/web/war/WEB-INF/lib/jsr305-1.3.9.jar:\
$GGDIR/web/war/WEB-INF/lib/gson-2.1.jar:\
$GGDIR/web/war/WEB-INF/lib/guava-11.0.1.jar:\
$GGDIR/web/war/WEB-INF/lib/httpclient-4.0.3.jar:\
$GGDIR/web/war/WEB-INF/lib/httpcore-4.0.1.jar:\
$GGDIR/web/war/WEB-INF/lib/jackson-core-asl-1.9.4.jar:\
$GGDIR/web/war/WEB-INF/lib/xpp3-1.1.4c.jar:\
$GGDIR/web/war/WEB-INF/lib/protobuf-java-2.2.0.jar:\
$GGDIR/web/war/WEB-INF/lib/google-http-client-1.9.0-beta.jar:\
$GGDIR/web/war/WEB-INF/lib/google-oauth-client-1.9.0-beta.jar:\
$GGDIR/web/war/WEB-INF/lib/google-api-client-1.9.0-beta.jar:\
$GGDIR/web/war/WEB-INF/lib/google-api-client-android2-1.9.0-beta.jar:\
$GGDIR/web/war/WEB-INF/lib/google-http-client-appengine-1.9.0-beta.jar:\
$GGDIR/web/war/WEB-INF/lib/jdo2-api-2.3-eb.jar:\
$GGDIR/web/war/WEB-INF/lib/transaction-api-1.1.jar:\
$GGDIR/web/war/WEB-INF/lib/google-oauth-client-servlet-1.9.0-beta.jar:\
$GGDIR/web/war/WEB-INF/lib/google-oauth-client-appengine-1.9.0-beta.jar:\
$GGDIR/web/war/WEB-INF/lib/google-api-client-servlet-1.9.0-beta.jar:\
$GGDIR/web/war/WEB-INF/lib/google-api-client-appengine-1.9.0-beta.jar:\
$GGDIR/web/war/WEB-INF/lib/google-http-client-android2-1.9.0-beta.jar:\
$GGDIR/web/war/WEB-INF/lib/google-http-client-android3-1.9.0-beta.jar:\
$GGDIR/web/war/WEB-INF/lib/google-api-services-drive-v1-1.5.0-beta.jar:\
$GGDIR/web/war/WEB-INF/lib/google-api-services-oauth2-v2-rev3-1.5.0-beta.jar
fi

export CLASSPATH
}

# 1. Setting up environment variables

GWTDIR=lib/gwt-2.5.0 # Override it if needed by using autobuild.conf
XML=`which xml 2>/dev/null`
if [ "$XML" = "" ]; then
 XML=`which xmlstarlet 2>/dev/null`
 fi
if [ "$XML" = "" ]; then
 XML=`pwd`/xml
 fi
GGDIR=`cd ..; pwd`

test -r autobuild.conf && . ./autobuild.conf && echo "* Using autobuild.conf for overriding defaults"

# 2. Setting defaults
if [ "$SVNDIR" = "" ]; then
 ORIGDIR=`dirname $0`
 WORKDIR=`cd $ORIGDIR; pwd`
else
 WORKDIR=`cd $SVNDIR/geogebra/web; pwd`
 fi

export GWTDIR
cd $WORKDIR
WEBDIR=`pwd`

VERBOSE=0
USERAGENTS=gecko1_8,safari,ie9
INSTALLDIR=""
STYLE=OBFUSCATED
OTHEROPTS=""
JAVAC_CLEANUP=""
GWT_UC_CLEANUP=0
PROJECT=web
HEAPSIZE=2048m
NOCACHE=1

# To detect compilation problems it is important
# to know which signal was sent by the compiler.
# That's why we trap all possible signals
# and do both a signal logging and cleanup.
trapper `seq 0 16` `seq 18 64` # SIGCHILD is not trapped

# 3. Reading command line arguments
while [ $# -gt 0 ]; do
 case $1 in
  -h | -help | --help)
   echo "This script builds and installs GeoGebraWeb."
   echo
   echo "Usage: $0 [options]"
   echo " Where options can be (defaults in parentheses):"
   echo "  -h, -help, --help   This help"
   echo -n "  -j                  Set JAVA_HOME"
   if [ "$JAVA_HOME" ]; then
    echo " (not set, expect a build error)"
   else
    echo " ($JAVA_HOME)"
    fi
   echo "  -u [useragents]     Comma separated list of user agents to compile ($USERAGENTS)"
   echo "  -i [directory]      If set, installs GeoGebraWeb into the given directory (first deletes!)"
   echo "  -c                  Do a cleanup before javac compilation"
   echo "  -cg                 Clean gwt-unitCache before compilation"
   echo "  -s [style]          Compilation style: OBFUSCATED, PRETTY or DETAILED ($STYLE)"
   echo "  -g [directory]      Use GWT SDK from the given directory ($GWTDIR)"
   echo "  -X [path]           Use XMLStarlet from the given path ($XML)"
   echo "  -T                  Compile the touch version"
   echo "  --heap [size]       Use size of heap memory for GWT compilation ($HEAPSIZE)"
   echo "  -nn                 Do not rewrite nocache filenames"
   echo "  -v, --verbose       Be verbose whenever possible (see the -H option as well)"
   echo "  -- [options]        Forward the rest options directly to the GWT Compiler"
   echo "  -H                  Show extra options for the GWT Compiler"
   echo
   echo "Examples:"
   echo " ./build -X /usr/local/bin/xml -s PRETTY -u safari -i /tmp/ggw -- -draftCompile"
   echo " ./build -T --heap 2048m -- -draftCompile"
   exit 0
   ;;

  -u)
   shift
   USERAGENTS="$1"
   ;;

  -i)
   shift
   INSTALLDIR="$1"
   ;;

  -X)
   shift
   XML="$1"
   ;;
   
  -j)
   shift
   JAVA_HOME="$1"
   ;;

  -c)
   JAVAC_CLEANUP=clean
   ;;

  -cg)
   GWT_UC_CLEANUP=1
   ;;

  -nn)
   NOCACHE=0
   ;;

  -s)
   shift
   STYLE="$1"
   ;;
   
  -g)
   shift
   GWTDIR="$1"
   ;;

  --heap)
   shift
   HEAPSIZE="$1"
   ;;

  -T)
   PROJECT=touch
   ;;

  -v | --verbose)
   VERBOSE=1
   ;;
   
  --)
   shift
   OTHEROPTS=$*
   while [ "$2" != "" ]; do
    shift
    done
   ;;
   
  -H)
   classpath
   java com.google.gwt.dev.Compiler
   exit 0
   ;;

  *)
   echo "Unknown parameter: $1. Use \"$0 -h\" for help."
   exit 1
   ;;

  esac
 shift
 done

if [ "$VERBOSE" = 1 ]; then
 ANT="ant -v"
else
 ANT="ant"
 fi

# 4. Testing configuration
test -d $GWTDIR || {
 echo "Error: No GWT SDK directory exists at $GWTDIR"
 exit 4
}
test -x $XML || {
 echo "Error: No XMLStarlet executable exists at $XML"
 exit 4
 }

GWTDIR=`cd $GWTDIR; pwd` # Making it absolute path

echo "* GWT SDK directory is set to $GWTDIR"
echo "* User agents: $USERAGENTS"
echo "* Compilation style: $STYLE"

# 5. (Re)creating parser
cd ../desktop
export JAVA_HOME
$ANT compile-grammar-cl || exit 5

# 6. Compiling web with javac

# 6/1. Creating symlinks
cd ../web/src/geogebra
ln -s ../../../common/src/com
ln -s ../../../common/src/geogebra/common
ln -s ../../../common/src/geogebra/webapache
ln -s ../../../common/src/geogebra/jung
ln -s ../../../common/src/geogebra/jts

# 6/2. Unzipping 3rd party GWT JARs
# TODO: Maybe do something similar with WebWorker
THIRDPARTYJARS="gwt-oauth2-0.2-alpha.jar"
for i in $THIRDPARTYJARS; do
 unzip -o $WEBDIR/lib/$i
 done

# 6/3. Applying patches
# Arpad's hack for #2452 (only for GWT >=2.5.0)
# sed -i s/\+GWT\.getModuleBaseURL/\+GWT\.getModuleBaseForStaticFiles/ $WEBDIR/src/geogebra/web/Web.java
# (No longer needed.)

# 6/4. Running javac for the web
cd $WEBDIR
$ANT $JAVAC_CLEANUP javac || exit 6

# 7. Preparing specific compilation
PROJECT_UPCASE=`echo $PROJECT | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}'`
cd src/geogebra
GWTXML=Web.gwt.xml
cp $GWTXML $GWTXML.orig

cat $GWTXML | \
 $XML ed -u "/module/set-property[@name='user.agent']/@value" -v "$USERAGENTS" > $GWTXML-b
mv $GWTXML-b $GWTXML

# 8. Compiling web with GWT Compiler
classpath
if [ $VERBOSE = 1 ]; then
 echo "Classpath for GWT Compiler is $CLASSPATH"
 fi

# 8/1. Deleting gwt-unitCache on demand
if [ $GWT_UC_CLEANUP = 1 -a -d $WEBDIR/gwt-unitCache ]; then
 cd $WEBDIR/gwt-unitCache
 find . | xargs rm
 fi
 
# 8/2. Running the GWT compiler
cd $WEBDIR/../$PROJECT/src/geogebra
java -Xmx$HEAPSIZE com.google.gwt.dev.Compiler\
 -style $STYLE -war $GGDIR/$PROJECT/war -strict $OTHEROPTS geogebra.$PROJECT_UPCASE || exit 8

# 8/3. Add a version number
cd $WEBDIR
if [ "$PROJECT" = "touch" ]; then
 VERSION=`./myversion`
 REVISION=`./myrevision`
 # We'll change the content of the <div id="version"...> tag to the current version.
 # We have to canonize the output since the <script...></script> text would be
 # changed to <script.../> which is not working in some browsers.
 # (See an explanation at http://stackoverflow.com/questions/69913/why-dont-self-closing-script-tags-work.)
 UIVERSION=`cat $GGDIR/$PROJECT/war/Touch.html | $XML sel -t -v '/html/body/div[@id="version"]'`
 DATE=`date "+%Y-%m-%d %H:%M"`
 cat $GGDIR/$PROJECT/war/Touch.html | \
   $XML ed -O -u '/html/body/div[@id="version"]' -v "$UIVERSION ($DATE) kernel $VERSION r$REVISION" > \
   $GGDIR/$PROJECT/war/Touch-b.html
 $XML c14n --exc-with-comments $GGDIR/$PROJECT/war/Touch-b.html > $GGDIR/$PROJECT/war/Touch.html
 fi

# 9. Done!
example () {
 echo "Insert the following URLs into your browser to test it:"
 if [ "$PROJECT" = "web" ]; then
  echo "file:///$INSTALLDIR/degenerateConics.html"
  echo "file:///$INSTALLDIR/ggbWebTools.html"
  echo "file:///$INSTALLDIR/app.html"
  fi
 if [ "$PROJECT" = "touch" ]; then
  echo "file:///$INSTALLDIR/Touch.html"
  fi
}

if [ "$INSTALLDIR" = "" ]; then
 echo "GeoGebraWeb compilation finished."
 INSTALLDIR=$GGDIR/$PROJECT/war
 example
else
 echo "Trying to remove and create $INSTALLDIR..."
 rm -fR $INSTALLDIR
 mkdir -p $INSTALLDIR || exit 9
 cp -a $GGDIR/$PROJECT/war/* $INSTALLDIR
 find $INSTALLDIR -name .svn -or -name WEB-INF | xargs rm -fR
 echo "GeoGebraWeb compilation and installation finished."
 example
 fi

exit 0
