package org.geogebra.web.html5.sound;


import org.geogebra.common.kernel.geos.GeoFunction;
import org.geogebra.common.main.App;
import org.geogebra.common.sound.FunctionSound;
import org.geogebra.web.html5.sound.WebAudioWrapper.FunctionAudioBuffer;

/**
 * Class for playing function-generated sounds.
 * 
 * @author Laszlo Gal
 *
 */
public final class FunctionSoundW extends FunctionSound implements
		FunctionAudioBuffer {

	public static final FunctionSoundW INSTANCE = new FunctionSoundW();
	private WebAudioWrapper waw = WebAudioWrapper.INSTANCE;

	/**
	 * Constructs instance of FunctionSound
	 * 
	 */
	public FunctionSoundW() {
		super();
		if (WebAudioWrapper.INSTANCE.init()) {
			App.debug("[WEB AUDIO] Initialization is OK.");
		} else {
			App.debug("[WEB AUDIO] Initialization has FAILED.");
		}

		if (!initStreamingAudio(getSampleRate(), getBitDepth())) {
			App.error("Cannot initialize streaming audio");
		}

	}
	/**
	 * Initializes instances of AudioFormat and SourceDataLine
	 * 
	 * @param sampleRate
	 *            = 8000, 16000, 11025, 16000, 22050, or 44100
	 * @param bitDepth
	 *            = 8 or 16
	 * @return
	 */
	protected boolean initStreamingAudio(int sampleRate, int bitDepth) {
		if (super.initStreamingAudio(sampleRate, bitDepth) == false) {
			return false;
		}

		boolean success = false;
		waw.setBuffer(this);
		waw.start(getSampleRate());

		return success;
	}

	/**
	 * Plays a sound generated by the time valued GeoFunction f(t), from t = min
	 * to t = max in seconds. The function is assumed to have range [-1,1] and
	 * will be clipped to this range otherwise.
	 * 
	 * @param geoFunction
	 * @param min
	 * @param max
	 * @param sampleRate
	 * @param bitDepth
	 */

	@Override
	public void playFunction(final GeoFunction geoFunction, final double min,
			final double max, final int sampleRate, final int bitDepth) {
		if (!checkFunction(geoFunction, min, max, sampleRate, bitDepth)) {
			return;
		}
		App.debug("FunctionSound");
		waw.setBuffer(this);
		generateFunctionSound();
	}

	/**
	 * Pauses/resumes sound generation
	 * 
	 * @param doPause
	 */
	public void pause(boolean doPause) {

		if (doPause) {
			setMin(getT());
			stopSound();
		} else {
			playFunction(getF(), getMin(), getMax(), getSampleRate(),
					getBitDepth());
		}
	}

	private boolean stopped = false;



	private void generateFunctionSound() {

		stopped = false;

		// time between samples
		setSamplePeriod(1.0 / getSampleRate());

		// create internal buffer for mathematically generated sound data
		// a small buffer minimizes latency when the function changes
		// dynamically
		// TODO: find optimal buffer size
		waw.start(getSampleRate());

		int frameSetSize = getSampleRate() / 50; // 20ms ok?
		if (getBitDepth() == 8) {
			setBuf(new byte[frameSetSize]);
		} else {
			setBuf(new byte[2 * frameSetSize]);
		}


		setT(getMin());
		loadBuffer();
		doFade(getBuf()[0], false);
		waw.write(getBuf(), getBufLength());

	}

	private void loadBuffer() {
		if (getBitDepth() == 16) {
			loadBuffer16(getT());
		} else {
			loadBuffer8(getT());
		}

	}

	public void fillBuffer() {
		int frameSetSize = getSampleRate() / 50;

		if (getT() < getMax() && !stopped) {
			setT(getT() + getSamplePeriod() * frameSetSize);
			loadBuffer();
			waw.write(getBuf(), getBufLength());
		} else {
			doFade(getBuf()[getBufLength() - 1], true);
		}
	}
		// // finish transfer of bytes from internal buffer to the sdl
		// // // buffer
		// // sdl.drain();
		// //
		// // // stop and close the sourceDataLine
		// // waw.stop();
		// // sdl.close();
		//
		// }
		// /**
		// * Shapes ends of waveform to fade sound data TODO: is this actually
		// * working?
		// *
		// * @param peakValue
		// * @param isFadeOut
		// */

	private void doFade(short peakValue, boolean isFadeOut) {
		byte[] fadeBuf = getFadeBuffer(peakValue, isFadeOut);
		waw.write(fadeBuf, fadeBuf.length);
		}

		/**
		 * Stops function sound
		 */
		public void stopSound() {
			stopped = true;
		}

	}
