//in -- unifrom
uniform mat4    modelview ;  // Incomming data used by the vertex shader (uniform and attributes)
uniform mat4    projection;  
//uniform mat3	normalMatrix; // no need since light position is model view system based
uniform vec3	lightPosition;
uniform vec3	viewDirection;
uniform vec2	ambiantDiffuse;
uniform vec4	color;
uniform vec3	normal;

//in -- attributes
attribute vec3  attribute_Position;  
attribute vec3  attribute_Normal;  
attribute vec4  attribute_Color;  
attribute vec2	attribute_Texture;   


//out
varying vec4    varying_Color;  
varying vec2	coordTexture;

void main(void)
{
   
  
  // position
  gl_Position = projection * modelview * vec4(attribute_Position, 1.0); 
  
  
  
  // color with light
  vec3 n;
  if (normal.x > 1.5){ // then use per-vertex normal
  	n = attribute_Normal;
  }else{
  	n = normal;
  }
  
  float factor = dot(n, lightPosition);
  if (factor * dot(n, viewDirection) > 0.0){ // check if back faced
  	factor = 0.0;
  }else if (factor < 0.0){
    factor = -factor;
  }
  
  float ambiant = ambiantDiffuse[0];
  float diffuse = ambiantDiffuse[1];
  vec4 c;
  if (color[0] < 0.0){ // then use per-vertex-color
  	c = attribute_Color;
  }else{ // use per-object-color
  	c = color;
  }
  
  varying_Color.rgb = (ambiant + diffuse * factor) * c.rgb;
  varying_Color.a = c.a;
  
  
  //varying_Color = color;
      
  // texture
  coordTexture = attribute_Texture;
  
}