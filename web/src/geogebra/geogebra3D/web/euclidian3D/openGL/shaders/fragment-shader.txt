precision mediump float;

// uniform
uniform int textureType;

uniform int enableClipPlanes;
uniform vec3 clipPlanesMin;
uniform vec3 clipPlanesMax;

uniform float dashValues[4];

uniform sampler2D Texture0;

// in (incomming varying data to the frament shader sent from the vertex shader)
varying   vec4    varying_Color;  
varying   vec2	  coordTexture;  
varying   vec3    realWorldCoords;


void main (void) 
{ 

	float x;

	if (enableClipPlanes == 1  // clip the scene
		&& (   realWorldCoords.x < clipPlanesMin.x || realWorldCoords.x > clipPlanesMax.x
			|| realWorldCoords.y < clipPlanesMin.y || realWorldCoords.y > clipPlanesMax.y 
			|| realWorldCoords.z < clipPlanesMin.z || realWorldCoords.z > clipPlanesMax.z 			
		   )){
		discard;
		
	}	
		
	// default
	if (textureType == 0){
		gl_FragColor = varying_Color;
		return;
	}
	
			
	// fading	
	if (textureType == 1){ // TEXTURE_TYPE_FADING = 1
		float factor;
		x = max(coordTexture.x, 0.0);
		float y = max(coordTexture.y, 0.0);
		gl_FragColor.rgb  = varying_Color.rgb;
		gl_FragColor.a = varying_Color.a * (1.0 - x) * (1.0 - y);
		return;
	}
		
		
	// text	
	if (textureType == 2){ // TEXTURE_TYPE_TEXT = 2;
		vec4 textureVal = texture2D(Texture0, coordTexture);
		if (textureVal.a < 0.25){
	  		discard; // don't write
  		}
  	
		gl_FragColor.rgb = varying_Color.rgb;
		gl_FragColor.a = textureVal.a;
		
		return;
	}
		
		
		
	// dash
				
		x =  mod(dashValues[0] * coordTexture.x, 1.0);
		if (x > dashValues[1] || (x > dashValues[2] && x <= dashValues[3])){
			discard;
		}
		
		gl_FragColor = varying_Color;

	
	
		
	
				

} 
	
	