/*
Archimedean 1.1, a 3D applet/application for visualizing, building, 
transforming and analyzing Archimedean solids and their derivatives.
Copyright 1998, 2011 Raffi J. Kasparian, www.raffikasparian.com.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package com.quantimegroup.solutions.archimedean.app;import java.awt.Font;import java.awt.GridLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import javax.swing.JPanel;import com.quantimegroup.solutions.archimedean.gui.FramedButton;public class VideoPlayer extends JPanel implements Runnable{	Archimedean gui;	private Thread animator = null;	private boolean running;	private int inc, stop, count;		private FramedButton rewindButton;	private FramedButton playBackwardButton;	private FramedButton stepBackwardButton;	private FramedButton pauseButton;	private FramedButton stepForwardButton;	private FramedButton playForwardButton;	private FramedButton fastForwardButton;		public VideoPlayer(){		super();		setLayout(new GridLayout( 1, 7, 3, 0 ) );		rewindButton = new FramedButton();		rewindButton.addActionListener(new ActionListener(){			public void actionPerformed(ActionEvent e) {				rewindButton_Action(e);			}					});		rewindButton.setText("|<<");		rewindButton.setFont(new Font("Dialog", Font.BOLD, 12));		add(rewindButton);		playBackwardButton = new FramedButton();		playBackwardButton.addActionListener(new ActionListener(){			public void actionPerformed(ActionEvent e) {				playBackwardButton_Action(e);			}					});		playBackwardButton.setText("<<");		playBackwardButton.setFont(new Font("Dialog", Font.BOLD, 12));		add(playBackwardButton);		stepBackwardButton = new FramedButton();		stepBackwardButton.addActionListener(new ActionListener(){			public void actionPerformed(ActionEvent e) {				stepBackwardButton_Action(e);			}					});		stepBackwardButton.setText("<");		stepBackwardButton.setFont(new Font("Dialog", Font.BOLD, 12));		add(stepBackwardButton);		pauseButton = new FramedButton();		pauseButton.addActionListener(new ActionListener(){			public void actionPerformed(ActionEvent e) {				pauseButton_Action(e);			}					});		pauseButton.setText("||");		pauseButton.setFont(new Font("Dialog", Font.BOLD, 9));		add(pauseButton);		stepForwardButton = new FramedButton();		stepForwardButton.addActionListener(new ActionListener(){			public void actionPerformed(ActionEvent e) {				stepForwardButton_Action(e);			}					});		stepForwardButton.setText(">");		stepForwardButton.setFont(new Font("Dialog", Font.BOLD, 12));		add(stepForwardButton);		playForwardButton = new FramedButton();		playForwardButton.addActionListener(new ActionListener(){			public void actionPerformed(ActionEvent e) {				playForwardButton_Action(e);			}					});		playForwardButton.setText(">>");		playForwardButton.setFont(new Font("Dialog", Font.BOLD, 12));		add(playForwardButton);		fastForwardButton = new FramedButton();		fastForwardButton.addActionListener(new ActionListener(){			public void actionPerformed(ActionEvent e) {				fastForwardButton_Action(e);			}					});		fastForwardButton.setText(">>|");		fastForwardButton.setFont(new Font("Dialog", Font.BOLD, 12));		add(fastForwardButton);	}	public void run(){		if( animator == null || gui.poly == null ) return;		running = true;		gui.poly.showBackSides = true;		for( ; count != stop && count >= 0 && count <= gui.builder.sides.num; count += inc ){			gui.poly.sides.num = count;			gui.viewerCanvas.repaint();			try{				Thread.sleep( 400 );			}catch( InterruptedException e ){				break;			}		}		running = false;	}	public void stop(){		running = false;	}	void start( int startValue, int increment, int stopValue ){		if( gui.poly == null ) return;		if( gui.poly.sides.num > gui.builder.sides.num ) return;		if( gui.poly.sides.num < 0 ) return;		if( startValue > gui.builder.sides.num || startValue < 0 ) return;		count = startValue;		inc = increment;		stop = stopValue;		if( !running ){			animator = new Thread(this);			animator.start();		}	}	void stepForwardButton_Action(ActionEvent event) {		if( gui.poly == null ) return;		start( gui.poly.sides.num + 1, 1, gui.poly.sides.num + 2 );	}	void stepBackwardButton_Action(ActionEvent event) {		if( gui.poly == null ) return;		start( gui.poly.sides.num - 1, -1, gui.poly.sides.num - 2 );	}	void playForwardButton_Action(ActionEvent event){		if( gui.poly == null ) return;		start( gui.poly.sides.num, 1, gui.builder.sides.num + 1 );	}	void playBackwardButton_Action(ActionEvent event){		if( gui.poly == null ) return;		start( gui.poly.sides.num, -1, -1 );	}	void fastForwardButton_Action(ActionEvent event) {		if( gui.builder == null ) return;		start( gui.builder.sides.num, 1, gui.builder.sides.num + 1 );	}	void rewindButton_Action(ActionEvent event) {		start( 0, 1, 1 );	}	void pauseButton_Action(ActionEvent event) {		if( gui.poly == null ) return;		start( gui.poly.sides.num, 1, gui.poly.sides.num + 1 );	}}