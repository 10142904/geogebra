/*
Archimedean 1.1, a 3D applet/application for visualizing, building, 
transforming and analyzing Archimedean solids and their derivatives.
Copyright 1998, 2011 Raffi J. Kasparian, www.raffikasparian.com.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

package com.quantimegroup.solutions.archimedean.app;import java.awt.BorderLayout;import java.awt.CardLayout;import java.awt.Color;import java.awt.Component;import java.awt.Container;import java.awt.Cursor;import java.awt.Dimension;import java.awt.Font;import java.awt.Frame;import java.awt.GridBagLayout;import java.awt.GridLayout;import java.awt.Rectangle;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.Enumeration;import java.util.Vector;import javax.swing.AbstractButton;import javax.swing.BoxLayout;import javax.swing.ButtonGroup;import javax.swing.JApplet;import javax.swing.JComponent;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JList;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.ListSelectionModel;import javax.swing.event.ChangeEvent;import javax.swing.event.ChangeListener;import javax.swing.event.ListSelectionEvent;import javax.swing.event.ListSelectionListener;import com.quantimegroup.solutions.archimedean.common.SolidDefinition;import com.quantimegroup.solutions.archimedean.gui.ClearableButtonGroup;import com.quantimegroup.solutions.archimedean.gui.FrameBorder;import com.quantimegroup.solutions.archimedean.gui.FramedButton;import com.quantimegroup.solutions.archimedean.gui.GBConstraints;import com.quantimegroup.solutions.archimedean.gui.InvisibleComponent;import com.quantimegroup.solutions.archimedean.gui.LabeledSlider;import com.quantimegroup.solutions.archimedean.gui.NullLayout;import com.quantimegroup.solutions.archimedean.gui.RainbowSlider;import com.quantimegroup.solutions.archimedean.gui.Utils;import com.quantimegroup.solutions.archimedean.utils.IntList;import com.quantimegroup.solutions.archimedean.utils.ObjectList;import com.quantimegroup.solutions.archimedean.utils.OrderedTriple;import com.quantimegroup.solutions.archimedean.utils.TreePrinterUtils;public class Archimedean extends JApplet {	public static final boolean PRIVILEGED = false;	private Frame parentFrame = null;	Color edgeColor = Color.black, color1, color2;	boolean colorCoding = true, drawEdges = true, draw = false, showCoordinates = false;	double sumTheta = 0;	boolean manualMode = false;	int numEntries = 0;	float hue1, hue2;	int polys[] = new int[5];	SpacePoly poly, loosePoly;	ArchiBuilder builder, dualBuilder, originalBuilder, looseBuilder;	SpaceSide looseSide;	private int lastIndex;	private JPanel contentPane;	private int padL, padR, padT, padB;	final String copyrightString = "©1998, 2011.  Raffi J. Kasparian.  Quantime Solutions.";	private final int controlPanelWidth = 200, appletHeight = 400, videoPlayerHeight = 25, copyrightLabelHeight = 15, mainMenuHeight = 90,			maxSizeViewerCanvas = appletHeight - videoPlayerHeight - copyrightLabelHeight, appletWidth = controlPanelWidth + maxSizeViewerCanvas,			subMainMenuPanelHeight = appletHeight - mainMenuHeight;	private MyRadioButton curMainMenuSelection;	private JPanel mainCardPanel = new JPanel(new CardLayout());	private JPanel createMethodCardPanel = new JPanel(new CardLayout());	private JPanel polyCreatePanel = new JPanel();	private JComponent createPanel;	private JLabel label1;	private JPanel createKeypad;	PolyButton polyButton1;	PolyButton polyButton2;	PolyButton polyButton3;	PolyButton polyButton4;	PolyButton polyButton5;	PolyButton polyButton6;	private PolyField enterField;	FramedButton otherButton;	private FramedButton okButton;	private JPanel newCreatePanel;	FramedButton newButton;	FramedButton createButton;	private MyCheckBox predefinedCheckbox;	public JLabel statusLabel;	private JList predefinedSolidsList;	private JPanel mainMenuPanel;	private MyRadioButton createRadioButton;	private ButtonGroup group1;	MyRadioButton transformRadioButton;	MyRadioButton analyzeRadioButton;	private MyRadioButton optionsRadioButton;	private JPanel transformPanel;	private LabeledSlider labeledSlider1;	private JPanel transformMenuPanel;	private MyRadioButton dualRadioButton;	private ClearableButtonGroup group2;	private MyRadioButton truncateCornersRadioButton;	private MyRadioButton truncateEdgesRadioButton;	private MyRadioButton resizeRadioButton;	private FramedButton dualOriginalButton;	private FramedButton newTransformationButton;	private JPanel optionsPanel;	private MyRadioButton fillRadioButton;	private ButtonGroup group3;	private MyRadioButton drawRadioButton;	private MyCheckBox drawEdgesCheckbox;	private MyCheckBox colorCodeCheckbox;	private RainbowSlider color1Slider;	private JLabel color1Label;	private RainbowSlider color2Slider;	private JLabel color2Label;	private MyCheckBox showCoordinatesCheckbox;	private MyCheckBox manualBuildCheckbox;	DrawingCanvas viewerCanvas;	private JPanel viewerFrame;	Analyzer analyzeList;	private VideoPlayer videoPlayer1;	JLabel copyrightLabel;	private JPanel rightPanel = new JPanel(new BorderLayout());	private JPanel leftPanel = new JPanel(new BorderLayout());	public Archimedean() {		// setTitle("Archimedean 1.0");		contentPane = new JPanel();		getContentPane().setLayout(new BorderLayout());		getContentPane().add(contentPane, BorderLayout.CENTER);		padL = 30;// insets().left;		padR = 30;// insets().right;		padT = 30;// insets().top;		padB = 30;// insets().bottom;		resize(padL + padR + appletWidth, padT + padB + appletHeight);		// setResizable(false);		setBackground(new Color(15655423));		contentPane.setLayout(new BorderLayout());		contentPane.add(leftPanel, BorderLayout.WEST);		contentPane.add(rightPanel, BorderLayout.CENTER);		setBackground(new Color(15655423));		contentPane.reshape(padL, padT, appletWidth, appletHeight);		mainMenuPanel = new JPanel();		mainMenuPanel.setLayout(new GridLayout(5, 1));		mainMenuPanel.reshape(0, 0, controlPanelWidth, mainMenuHeight);		mainMenuPanel.setBackground(new Color(65280));		// contentPane.add(mainMenuPanel);		leftPanel.add(mainMenuPanel, BorderLayout.NORTH);		group1 = new ButtonGroup();		createRadioButton = new MyRadioButton("Create...", true);		createRadioButton.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				createRadioButton_Action(e);			}		});		group1.add(createRadioButton);		mainMenuPanel.add(createRadioButton, 0);		transformRadioButton = new MyRadioButton("Transform...", false);		transformRadioButton.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				transformRadioButton_Action(e);			}		});		group1.add(transformRadioButton);		transformRadioButton.setVisible(false);		mainMenuPanel.add(transformRadioButton, 1);		analyzeRadioButton = new MyRadioButton("Analyze...", false);		analyzeRadioButton.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				analyzeRadioButton_Action(e);			}		});		group1.add(analyzeRadioButton);		analyzeRadioButton.setVisible(false);		mainMenuPanel.add(analyzeRadioButton, 2);		optionsRadioButton = new MyRadioButton("Options...", false);		optionsRadioButton.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				optionsRadioButton_Action(e);			}		});		group1.add(optionsRadioButton);		mainMenuPanel.add(optionsRadioButton, 3);		label1 = new JLabel("", JLabel.CENTER);		mainMenuPanel.add(label1);		curMainMenuSelection = createRadioButton;		viewerFrame = new JPanel(new BorderLayout());		viewerFrame.setBorder(new FrameBorder(Color.lightGray, 5));		// viewerFrame.reshape(controlPanelWidth + 0, 0, maxSizeViewerCanvas,		// maxSizeViewerCanvas + copyrightLabelHeight);		// Utils.freezeSize(viewerFrame, maxSizeViewerCanvas,		// maxSizeViewerCanvas + copyrightLabelHeight);		viewerFrame.setPreferredSize(new Dimension(maxSizeViewerCanvas, maxSizeViewerCanvas + copyrightLabelHeight));		viewerCanvas = new DrawingCanvas();		viewerCanvas.setGUI(this);		viewerCanvas.setForeground(new Color(0));		viewerCanvas.setBackground(new Color(0));		Rectangle r = viewerFrame.getBounds();		viewerCanvas.reshape(r.x, r.y, r.width, r.width);		viewerFrame.add(viewerCanvas, BorderLayout.CENTER);		copyrightLabel = new JLabel(copyrightString, JLabel.CENTER);		copyrightLabel.reshape(r.x, viewerFrame.bounds().height - copyrightLabelHeight, r.width, copyrightLabelHeight);		copyrightLabel.setFont(new Font("Dialog", Font.PLAIN, 9));		copyrightLabel.setBackground(Color.black);		copyrightLabel.setForeground(new Color(15655423));		viewerFrame.add(copyrightLabel, BorderLayout.SOUTH);		viewerFrame.setBackground(Color.black);		// contentPane.add(viewerFrame);		rightPanel.add(viewerFrame, BorderLayout.CENTER);		videoPlayer1 = new VideoPlayer();		videoPlayer1.gui = this;		videoPlayer1.reshape(controlPanelWidth, viewerFrame.bounds().height, viewerFrame.bounds().width, videoPlayerHeight);		// contentPane.add(videoPlayer1);		rightPanel.add(videoPlayer1, BorderLayout.SOUTH);		SpacePoint.init(viewerCanvas.size().width, viewerCanvas.size().height);		createCreatePanel();		mainCardPanel.add(createPanel, "create");		createTransformPanel();		mainCardPanel.add(transformPanel, "transform");		createAnalyzeList();		JScrollPane analyzeScrollPane = new JScrollPane(analyzeList, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,				JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);		mainCardPanel.add(analyzeScrollPane, "analyze");		createOptionsPanel();		mainCardPanel.add(optionsPanel, "options");		mainCardPanel.reshape(0, mainMenuHeight, controlPanelWidth, subMainMenuPanelHeight);		// contentPane.add(mainCardPanel);		leftPanel.add(mainCardPanel, BorderLayout.CENTER);		showCard(mainCardPanel, "create");		createPredefinedSolidsList();		JPanel predefinedPanel = new JPanel(new BorderLayout());		predefinedPanel.setBackground(null);		JScrollPane scrollPane = new JScrollPane(predefinedSolidsList, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,				JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);		predefinedPanel.add(scrollPane, BorderLayout.CENTER);		createMethodCardPanel.add(predefinedPanel, "auto");		showCard(createMethodCardPanel, "poly");		show();	}	void otherButton_Action(ActionEvent event) {		createKeypad.remove(otherButton);		createKeypad.add(okButton);		createKeypad.add(enterField);		enterField.requestFocus();		createKeypad.repaint();	}	static double polyAngle(int numSides) {		return Math.PI * (1 - 2.0 / numSides);	}	void createRadioButton_Action(ActionEvent event) {		if (curMainMenuSelection == createRadioButton) {			return;		}		curMainMenuSelection = createRadioButton;		showCard(mainCardPanel, "create");	}	void transformRadioButton_Action(ActionEvent event) {		if (curMainMenuSelection == transformRadioButton) {			return;		}		curMainMenuSelection = transformRadioButton;		if (transformPanel == null) {			createTransformPanel();			mainCardPanel.add(transformPanel, "transform");		}		showCard(mainCardPanel, "transform");		// contentPane.repaint();	}	void analyzeRadioButton_Action(ActionEvent event) {		if (curMainMenuSelection == analyzeRadioButton) {			return;		}		curMainMenuSelection = analyzeRadioButton;		if (analyzeList == null) {			createAnalyzeList();			mainCardPanel.add(analyzeList, "analyze");		}		analyzeList.init();		showCard(mainCardPanel, "analyze");		// contentPane.repaint();		// viewerCanvas.repaint();	}	void optionsRadioButton_Action(ActionEvent event) {		if (curMainMenuSelection == optionsRadioButton) {			return;		}		curMainMenuSelection = optionsRadioButton;		if (optionsPanel == null) {			createOptionsPanel();			mainCardPanel.add(optionsPanel, "options");		}		showCard(mainCardPanel, "options");		// contentPane.repaint();	}	void createPredefinedSolidsList() {		Vector items = new Vector();		int i = -1;		for (SolidDefinition sd : SolidDefinition.getKnownSolids()) {			i++;			// for (int i = 0; i < SolidDefinition.knownSolids.num; ++i) {			// SolidDefinition sd = (SolidDefinition)			// SolidDefinition.knownSolids.get(i);			if (i == 0) {				items.add("PLATONIC:");				items.add(" ");			} else if (i == 5) {				items.add(" ");				items.add("ARCHIMEDEAN:");				items.add(" ");			} else if (i == 18) {				items.add(" ");				items.add("DUAL:");				items.add(" ");			} else if (i == 31) {				items.add(" ");				items.add("RATIONAL:");				items.add(" ");			}			items.add(sd.getName());		}		items.add(" ");		items.add("OTHERS:");		items.add(" ");		items.add("prisms (4, 4, *), antiprisms");		items.add("(3, 3, 3, *), and their duals");		items.add("(dipyramids and trapezohedra)");		items.add("must be entered manually.");		predefinedSolidsList = new JList(items);		predefinedSolidsList.reshape(0, 26, controlPanelWidth, createPanel.size().height - 80);		predefinedSolidsList.setBackground(new Color(16777215));		predefinedSolidsList.addListSelectionListener(new ListSelectionListener() {			public void valueChanged(ListSelectionEvent e) {				if (predefinedSolidsList.getSelectedIndex() == lastIndex)					return;				lastIndex = predefinedSolidsList.getSelectedIndex();				String s = (String) predefinedSolidsList.getSelectedValue();				if (s == null)					return;				SolidDefinition sd = ExtendedSolidDefinition.findSolidDefinition(s);				if (sd == null)					return;				create(sd.getSignature(), sd.getSignature().length, sd.isDual());				newButton.setEnabled(true);				label1.setText("");				for (int i = 0; i < sd.getSignature().length; ++i) {					label1.setText(label1.getText() + sd.getSignature()[i] + " ");				}			}		});		predefinedSolidsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);		predefinedSolidsList.addMouseListener(new MouseAdapter() {			public void mouseReleased(MouseEvent e) {				predefinedSolidsList.clearSelection();			}		});	}	void createAnalyzeList() {		analyzeList = new Analyzer();		analyzeList.reshape(0, mainMenuHeight, controlPanelWidth, subMainMenuPanelHeight);		analyzeList.setBackground(new Color(16777215));		analyzeList.gui = this;	}	void createTransformPanel() {		transformPanel = new JPanel();		transformPanel.setLayout(null);		transformPanel.reshape(0, mainMenuHeight, controlPanelWidth, subMainMenuPanelHeight);		transformPanel.setBackground(new Color(65280));		transformMenuPanel = new JPanel();		transformMenuPanel.reshape(20, 10, controlPanelWidth - 40, (int) (mainMenuHeight * 4 / 5.0));		transformMenuPanel.setLayout(new GridLayout(4, 1));		transformMenuPanel.setOpaque(false);		group2 = new ClearableButtonGroup();		dualRadioButton = new MyRadioButton("Dual...", false);		dualRadioButton.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				dualRadioButton_Action(e);			}		});		group2.add(dualRadioButton);		dualRadioButton.reshape(0, 0, controlPanelWidth - 40, 13);		transformMenuPanel.add(dualRadioButton);		truncateCornersRadioButton = new MyRadioButton("Truncate Corners...", false);		truncateCornersRadioButton.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				truncateCornersRadioButton_Action(e);			}		});		group2.add(truncateCornersRadioButton);		truncateCornersRadioButton.reshape(0, 18, controlPanelWidth - 40, 13);		transformMenuPanel.add(truncateCornersRadioButton);		truncateEdgesRadioButton = new MyRadioButton("Truncate Edges...", false);		truncateEdgesRadioButton.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				truncateEdgesRadioButton_Action(e);			}		});		group2.add(truncateEdgesRadioButton);		truncateEdgesRadioButton.reshape(0, 36, controlPanelWidth - 40, 13);		transformMenuPanel.add(truncateEdgesRadioButton);		resizeRadioButton = new MyRadioButton("Resize...", false);		resizeRadioButton.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				resizeRadioButton_Action(e);			}		});		group2.add(resizeRadioButton);		resizeRadioButton.reshape(0, 54, controlPanelWidth - 40, 13);		transformMenuPanel.add(resizeRadioButton);		transformPanel.add(transformMenuPanel);		labeledSlider1 = new LabeledSlider();		labeledSlider1.addChangeListener(new ChangeListener() {			public void stateChanged(ChangeEvent e) {				LabeledSlider ls = (LabeledSlider) e.getSource();				double value = ls.valToValue(ls.getThumbVal());				if (getSelection(group2) == resizeRadioButton) {					poly.personalAxes.sizeFactor = value;					poly.update();					poly.dirtyPoints = true;					viewerCanvas.repaint();				} else if (getSelection(group2) == truncateCornersRadioButton) {					((TruncableSpacePoly) poly).truncPercent = value;					for (int i = 0; i < builder.points.num; ++i) {						OrderedTriple p = (OrderedTriple) poly.originalPoints.get(i);						if (p instanceof TruncablePoint) {							((TruncablePoint) p).locate(((TruncableSpacePoly) poly).truncPercent);						}					}					poly.update();					poly.dirtyPoints = true;					viewerCanvas.repaint();				} else if (getSelection(group2) == truncateEdgesRadioButton) {					((TruncableSpacePoly) poly).truncPercent = value;					for (int i = 0; i < builder.points.num; ++i) {						OrderedTriple p = (OrderedTriple) poly.originalPoints.get(i);						if (p instanceof EdgeTruncablePoint) {							((EdgeTruncablePoint) p).locate(((TruncableSpacePoly) poly).truncPercent);						}					}					poly.update();					poly.dirtyPoints = true;					viewerCanvas.repaint();				}			}		});		labeledSlider1.setVisible(false);		labeledSlider1.reshape(20, mainMenuHeight + 20, controlPanelWidth - 40, 150);		labeledSlider1.setForeground(new Color(255));		labeledSlider1.setBackground(new Color(15655423));		transformPanel.add(labeledSlider1);		dualOriginalButton = new FramedButton();		dualOriginalButton.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				dualOriginalButton_Action(e);			}		});		dualOriginalButton.reshape(45, 136, 111, 30);		dualOriginalButton.setBackground(new Color(16711680));		transformPanel.add(dualOriginalButton);		newTransformationButton = new FramedButton();		newTransformationButton.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				newTransformationButton_Action(e);			}		});		newTransformationButton.reshape(25, 270, 150, 30);		newTransformationButton.setText("New Transformation...");		transformPanel.add(newTransformationButton);	}	void createCreatePanel() {		createPanel = new JPanel();		createPanel.setLayout(new BoxLayout(createPanel, BoxLayout.Y_AXIS));		createPanel.reshape(0, mainMenuHeight, controlPanelWidth, subMainMenuPanelHeight);		createPanel.setBackground(new Color(65280));		predefinedCheckbox = new MyCheckBox("Predefined Solids");		predefinedCheckbox.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				predefinedCheckbox_Action(e);			}		});		// predefinedCheckbox.reshape(35, 10, 131, 20);		predefinedCheckbox.setAlignmentX(0.5f);		createPanel.add(predefinedCheckbox);		predefinedCheckbox.setSelected(false);		polyCreatePanel.setLayout(new GridBagLayout());		// polyCreatePanel.setLayout(new GridBagLayout());		// polyCreatePanel.setBorder(BorderFactory.createLineBorder(Color.RED, 1));		GBConstraints gbc = new GBConstraints();		polyCreatePanel.setBackground(null);		polyCreatePanel.reshape(0, 0, controlPanelWidth, subMainMenuPanelHeight);		createMethodCardPanel.setLayout(new CardLayout());		createMethodCardPanel.setBackground(null);		createMethodCardPanel.reshape(0, 26, controlPanelWidth, subMainMenuPanelHeight);		createMethodCardPanel.add(polyCreatePanel, "poly");		createPanel.add(createMethodCardPanel);		createKeypad = createCreateKeypad();		createKeypad.setAlignmentX(0.5f);		TreePrinterUtils.nameComponent(createKeypad, "createKeypad");		gbc.gridx = 0;		polyCreatePanel.add(createKeypad, gbc);		newCreatePanel = new JPanel();		newCreatePanel.setAlignmentX(0.5f);		newCreatePanel.setLayout(new GridLayout(1, 2));		Utils.freezeSize(newCreatePanel, 150, 50);		newCreatePanel.setBackground(new Color(15655423));		gbc.setFill(gbc.NONE, gbc.SOUTH);		gbc.setInsets(50, 0, 0, 0);		polyCreatePanel.add(newCreatePanel, gbc);		newButton = new FramedButton();		newButton.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				newButton_Action(e);			}		});		newCreatePanel.add(newButton);		createButton = new FramedButton();		createButton.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				createButton_Action(e);			}		});		createButton.setEnabled(false);		newCreatePanel.add(createButton);		statusLabel = new JLabel("", JLabel.CENTER) {			public Dimension getPreferredSize() {				Dimension d = super.getPreferredSize();				d.height = 15;				return d;			}		};		// Utils.freezeHeight(statusLabel, 30);		statusLabel.setForeground(new Color(16711680));		gbc.setInsets(15, 0, 15, 0);		gbc.minHeight = 20;		polyCreatePanel.add(statusLabel, gbc, 0);		gbc.minHeight = -1;		gbc.weighty = 1;		gbc.setFill(gbc.BOTH, gbc.SOUTH);		polyCreatePanel.add(new InvisibleComponent(), gbc);		TreePrinterUtils.nameComponent(statusLabel, "statusLabel");		otherButton.setText("Other...");		okButton.setText("OK");		newButton.setText("New...");		createButton.setText("Create");		enterField.setGUI(this);	}	private JPanel createCreateKeypad() {		createKeypad = new JPanel();		createKeypad.setLayout(new NullLayout());		createKeypad.reshape(26, 26, 150, 148);		createKeypad.setBackground(new Color(15655423));		polyButton1 = new PolyButton(3, this);		polyButton1.reshape(0, 0, 50, 50);		createKeypad.add(polyButton1);		polyButton2 = new PolyButton(4, this);		polyButton2.reshape(50, 0, 50, 50);		createKeypad.add(polyButton2);		polyButton3 = new PolyButton(5, this);		polyButton3.reshape(100, 0, 50, 50);		createKeypad.add(polyButton3);		polyButton4 = new PolyButton(6, this);		polyButton4.reshape(0, 50, 50, 50);		createKeypad.add(polyButton4);		polyButton5 = new PolyButton(8, this);		polyButton5.reshape(50, 50, 50, 50);		createKeypad.add(polyButton5);		polyButton6 = new PolyButton(10, this);		polyButton6.reshape(100, 50, 50, 50);		createKeypad.add(polyButton6);		enterField = new PolyField();		enterField.reshape(3, 103, 44, 44);		enterField.setFont(new Font("Dialog", Font.PLAIN, 24));		otherButton = new FramedButton();		otherButton.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				otherButton_Action(e);			}		});		otherButton.reshape(0, 100, 150, 50);		createKeypad.add(otherButton);		okButton = new FramedButton();		okButton.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				okButton_Action(e);			}		});		okButton.reshape(50, 100, 100, 50);		return createKeypad;	}	void createOptionsPanel() {		optionsPanel = new JPanel();		optionsPanel.setLayout(new GridBagLayout());		GBConstraints gbc = new GBConstraints();		optionsPanel.reshape(0, mainMenuHeight, controlPanelWidth, subMainMenuPanelHeight);		optionsPanel.setBackground(new Color(65280));		group3 = new ButtonGroup();		fillRadioButton = new MyRadioButton("Fill", true);		fillRadioButton.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				fillRadioButton_Action(e);			}		});		group3.add(fillRadioButton);		fillRadioButton.reshape(42, 33, 45, 20);		gbc.setGrid(0, 0);		optionsPanel.add(fillRadioButton, gbc);		drawRadioButton = new MyRadioButton("Draw", false);		drawRadioButton.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				drawRadioButton_Action(e);			}		});		group3.add(drawRadioButton);		drawRadioButton.reshape(92, 33, 59, 20);		gbc.setGrid(1, 0);		optionsPanel.add(drawRadioButton, gbc);		drawEdgesCheckbox = new MyCheckBox("Draw Edges");		drawEdgesCheckbox.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				drawEdgesCheckbox_Action(e);			}		});		drawEdgesCheckbox.reshape(51, 59, 98, 20);		gbc.setGrid(0, gbc.RELATIVE);		gbc.setSize(2, 1);		gbc.anchor = gbc.WEST;		optionsPanel.add(drawEdgesCheckbox, gbc);		drawEdgesCheckbox.setSelected(true);		colorCodeCheckbox = new MyCheckBox("Color Code");		colorCodeCheckbox.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				colorCodeCheckbox_Action(e);			}		});		colorCodeCheckbox.reshape(51, 76, 95, 20);		optionsPanel.add(colorCodeCheckbox, gbc);		gbc.anchor = gbc.CENTER;		colorCodeCheckbox.setSelected(true);		color1Label = new JLabel("1st Color", JLabel.CENTER);		color1Label.setVisible(false);		color1Label.reshape(20, 123, 160, 20);		color2Label = new JLabel("2nd Color", JLabel.CENTER);		color2Label.setVisible(false);		color2Label.reshape(20, 168, 160, 20);		showCoordinatesCheckbox = new MyCheckBox("Show Coordinates");		showCoordinatesCheckbox.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				showCoordinatesCheckbox_Action(e);			}		});		showCoordinatesCheckbox.reshape(27, 192, 147, 20);		showCoordinatesCheckbox.setSelected(false);		manualBuildCheckbox = new MyCheckBox("Manual Build");		manualBuildCheckbox.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent e) {				manualBuildCheckbox_Action(e);			}		});		manualBuildCheckbox.reshape(27, 225, 100, 40);		color1Slider = new RainbowSlider();		color1Slider.addChangeListener(new ChangeListener() {			public void stateChanged(ChangeEvent e) {				RainbowSlider rs = (RainbowSlider) e.getSource();				color1 = rs.getColor();				hue1 = rs.getHue();				viewerCanvas.repaint();			}		});		color1Slider.setVisible(false);		color1Slider.setPreferredSize(new Dimension(160, 20));		optionsPanel.add(color1Slider, gbc);		optionsPanel.add(color1Label, gbc);		color1Slider.setVal(0);		color2Slider = new RainbowSlider();		color2Slider.addChangeListener(new ChangeListener() {			public void stateChanged(ChangeEvent e) {				RainbowSlider rs = (RainbowSlider) e.getSource();				color2 = rs.getColor();				hue2 = rs.getHue();				viewerCanvas.repaint();			}		});		color2Slider.setVisible(false);		color2Slider.setPreferredSize(new Dimension(160, 20));		optionsPanel.add(color2Slider, gbc);		color2Slider.setVal(color2Slider.getMaxval() / 2);		optionsPanel.add(color2Label, gbc);		gbc.anchor = gbc.WEST;		// gbc.insets = new Insets(0, 10, 0, 0);		optionsPanel.add(showCoordinatesCheckbox, gbc);		optionsPanel.add(manualBuildCheckbox, gbc);		gbc.gridheight = gbc.REMAINDER;		gbc.weighty = 1;		optionsPanel.add(new InvisibleComponent(), gbc);	}	void dualRadioButton_Action(ActionEvent event) {		if (dualBuilder == null) {			dualOriginalButton.setBackground(Color.getHSBColor(hue2, .25f, 1f));			if (builder.type == ExtendedSolidDefinition.DUAL)				dualOriginalButton.setText("Show Anti-dual");			else				dualOriginalButton.setText("Show Dual");		}		truncateCornersRadioButton.setVisible(false);		truncateEdgesRadioButton.setVisible(false);		dualOriginalButton.setVisible(true);		labeledSlider1.setVisible(false);	}	void truncateCornersRadioButton_Action(ActionEvent event) {		analyzeList.stopDemo();		videoPlayer1.stop();		String[] labels = null;		dualBuilder = originalBuilder = null;		if (!(poly instanceof TruncableSpacePoly)) {			boolean showCircumscribedSphere = poly.isShowCircumscribedSphere();			boolean showInscribedSphere = poly.isShowInscribedSphere();			double[] truncStages;			builder.reclaim();			switch (builder.type) {			case ExtendedSolidDefinition.PLATONIC:				truncStages = builder.calcTruncStages();				builder = builder.prepareCornerTrunc();				poly = new TruncableSpacePoly(this, builder, poly.personalAxes);				poly.setShowCircumscribedSphere(showCircumscribedSphere);				poly.setShowInscribedSphere(showInscribedSphere);				((TruncableSpacePoly) poly).type = TruncableSpacePoly.CT_PLATONIC;				((TruncableSpacePoly) poly).truncStages = truncStages;				break;			case ExtendedSolidDefinition.ARCHIMEDEAN:				IntList ranks = new IntList(builder.signature, builder.signature.length);				ranks.removeDuplicates();				ranks.sort();				truncStages = builder.calcTruncStages();				builder = builder.prepareCornerTrunc();				poly = new TruncableSpacePoly(this, builder, poly.personalAxes);				poly.setShowCircumscribedSphere(showCircumscribedSphere);				poly.setShowInscribedSphere(showInscribedSphere);				((TruncableSpacePoly) poly).type = TruncableSpacePoly.CT_ARCHIMEDEAN;				((TruncableSpacePoly) poly).ranks = ranks;				((TruncableSpacePoly) poly).truncStages = truncStages;				break;			}			viewerCanvas.repaint();		}		switch (builder.type) {		case ExtendedSolidDefinition.PLATONIC:			String[] tempStrings1 = {					"Original", "Archimedean 1", "Archimedean 2", "Archimedean 3", "Inscribed dual" };			labels = tempStrings1;			break;		case ExtendedSolidDefinition.ARCHIMEDEAN:			if (((TruncableSpacePoly) poly).truncStages.length == 4) {				String[] tempStrings2 = {						"Original", "Stage 1", "Stage2", "Inscribed dual" };				labels = tempStrings2;			} else if (((TruncableSpacePoly) poly).truncStages.length == 5) {				String[] tempStrings2 = {						"Original", "Stage 1", "Stage 2", "Stage 3", "Inscribed dual" };				labels = tempStrings2;			}			break;		}		dualRadioButton.setVisible(false);		truncateEdgesRadioButton.setVisible(false);		dualOriginalButton.setVisible(false);		labeledSlider1.setLabels(labels);		labeledSlider1.setValues(((TruncableSpacePoly) poly).truncStages, ((TruncableSpacePoly) poly).truncPercent);		labeledSlider1.setVisible(true);		labeledSlider1.repaint();	}	void truncateEdgesRadioButton_Action(ActionEvent event) {		videoPlayer1.stop();		if (!(poly instanceof TruncableSpacePoly)) {			analyzeList.stopDemo();			IntList ranks = new IntList(builder.signature, builder.signature.length);			ranks.removeDuplicates();			ranks.sort();			builder.reclaim();			double[] truncStages = builder.calcEdgeTruncStages();			builder = builder.prepareEdgeTrunc();			// if (poly != null) poly.stop();			boolean showCircumscribedSphere = poly.isShowCircumscribedSphere();			boolean showInscribedSphere = poly.isShowInscribedSphere();			poly = new TruncableSpacePoly(this, builder, poly.personalAxes);			poly.setShowCircumscribedSphere(showCircumscribedSphere);			poly.setShowInscribedSphere(showInscribedSphere);			((TruncableSpacePoly) poly).type = TruncableSpacePoly.ET_ARCHIMEDEAN;			((TruncableSpacePoly) poly).ranks = ranks;			((TruncableSpacePoly) poly).truncStages = truncStages;			viewerCanvas.repaint();		}		String[] labels = new String[((TruncableSpacePoly) poly).truncStages.length];		labels[0] = "Original";		for (int i = 1; i < ((TruncableSpacePoly) poly).truncStages.length - 1; ++i) {			labels[i] = "Stage " + String.valueOf(i);		}		labels[((TruncableSpacePoly) poly).truncStages.length - 1] = "Maximum trunc.";		labeledSlider1.setLabels(labels);		labeledSlider1.setValues(((TruncableSpacePoly) poly).truncStages, ((TruncableSpacePoly) poly).truncPercent);		dualOriginalButton.setVisible(false);		dualRadioButton.setVisible(false);		truncateCornersRadioButton.setVisible(false);		labeledSlider1.setVisible(true);		labeledSlider1.repaint();	}	void resizeRadioButton_Action(ActionEvent event) {		dualOriginalButton.setVisible(false);		double largest = (viewerCanvas.size().width * 0.9) / (builder.getMaxRadius() * 2);		if (largest > 1.1) {			String[] labels = {					"Smallest", "Original", "Largest" };			labeledSlider1.setLabels(labels);			double[] values = {					0.01, 1, largest };			labeledSlider1.setValues(values, poly.personalAxes.sizeFactor);		} else {			String[] labels = {					"Smallest", "Original" };			labeledSlider1.setLabels(labels);			double[] values = {					0.01, 1 };			labeledSlider1.setValues(values, poly.personalAxes.sizeFactor);		}		labeledSlider1.setVisible(true);		labeledSlider1.repaint();	}	void dualOriginalButton_Action(ActionEvent event) {		analyzeList.stopDemo();		videoPlayer1.stop();		if (!dualOriginalButton.getText().equals("Show Original")) {			if (dualBuilder == null) {				originalBuilder = builder;				builder.reclaim();				if (builder.type == ExtendedSolidDefinition.DUAL)					dualBuilder = builder.antiDual();				else					dualBuilder = builder.dual();			}			builder = dualBuilder;			dualOriginalButton.setBackground(Color.getHSBColor(hue1, .25f, 1f));			dualOriginalButton.setText("Show Original");		} else {			builder = originalBuilder;			dualOriginalButton.setBackground(Color.getHSBColor(hue2, .25f, 1f));			if (builder.type == ExtendedSolidDefinition.DUAL)				dualOriginalButton.setText("Show Anti-dual");			else				dualOriginalButton.setText("Show Dual");		}		builder.reclaim();		// if (poly != null) poly.stop();		boolean showCircumscribedSphere = poly.isShowCircumscribedSphere();		boolean showInscribedSphere = poly.isShowInscribedSphere();		poly = new SpacePoly(this, builder, poly.personalAxes);		poly.setShowCircumscribedSphere(showCircumscribedSphere);		poly.setShowInscribedSphere(showInscribedSphere);		dualOriginalButton.repaint();		viewerCanvas.buildMode = false;		viewerFrame.remove(viewerCanvas);		viewerFrame.add(viewerCanvas);		// viewerCanvas.repaint();	}	void newButton_Action(ActionEvent event) {		analyzeList.stopDemo();		transformRadioButton.setVisible(false);		analyzeRadioButton.setVisible(false);		statusLabel.setText("");		enableCreateKeypad(true);		createButton.setEnabled(false);		newButton.setEnabled(false);		clearEntries();		viewerCanvas.buildMode = true;		loosePoly = null;		// if (poly != null) poly.stop();		poly = null;		builder = null;	}	void createButton_Action(ActionEvent event) {		try {			statusLabel.setText("");			int[] sign = ArchiCorner.getSignature(polys, numEntries);			boolean legal = true;			if (!PRIVILEGED) {//				legal = (manualMode || ExtendedSolidDefinition.findSolidDefinition(sign, false) != null || isPrism(polys, numEntries) || isAntiprism(//						polys, numEntries));				legal = (manualMode || SolidDefinition.isKnown(polys, numEntries) || isPrism(polys, numEntries) || isAntiprism(						polys, numEntries));			}			if (legal) {				statusLabel.setText("Processing...");				new Thread() {					public void run() {						create(polys, numEntries, false);						String text = "Unable to complete this solid";						if (builder == null) {						} else if (builder.type == ExtendedSolidDefinition.ARCHIMEDEAN) {							text = "Archimedean";						} else if (builder.type == ExtendedSolidDefinition.DUAL) {							text = "Dual";						} else if (builder.type == ExtendedSolidDefinition.OTHER) {							text = "Other";						} else if (builder.type == ExtendedSolidDefinition.PLATONIC) {							text = "Platonic";						} else if (builder.type == ExtendedSolidDefinition.RATIONAL) {							text = "Rational";						}						statusLabel.setText(text);					}				}.start();			} else {				statusLabel.setText("Illegal parameters. Try again.");				createButton.setEnabled(false);			}		} catch (Throwable e) {			e.printStackTrace();		}	}	void fillRadioButton_Action(ActionEvent event) {		drawEdgesCheckbox.setVisible(true);		colorCodeCheckbox.setVisible(true);		if (colorCodeCheckbox.isSelected()) {			color1Label.setVisible(false);			color1Slider.setVisible(false);			color2Label.setVisible(false);			color2Slider.setVisible(false);		} else {			color1Label.setVisible(true);			color1Slider.setVisible(true);			color2Label.setVisible(true);			color2Slider.setVisible(true);		}		draw = false;		viewerCanvas.repaint();	}	void drawRadioButton_Action(ActionEvent event) {		drawEdgesCheckbox.setVisible(false);		colorCodeCheckbox.setVisible(false);		color1Label.setVisible(true);		color1Slider.setVisible(true);		color2Label.setVisible(false);		color2Slider.setVisible(false);		draw = true;		viewerCanvas.repaint();	}	void colorCodeCheckbox_Action(ActionEvent event) {		if (colorCodeCheckbox.isSelected()) {			color1Label.setVisible(false);			color1Slider.setVisible(false);			color2Label.setVisible(false);			color2Slider.setVisible(false);		} else {			color1Label.setVisible(true);			color1Slider.setVisible(true);			color2Label.setVisible(true);			color2Slider.setVisible(true);		}		colorCoding = colorCodeCheckbox.isSelected();		viewerCanvas.repaint();	}	void okButton_Action(ActionEvent event) {		createKeypad.remove(okButton);		createKeypad.remove(enterField);		createKeypad.add(otherButton);		createKeypad.repaint();		if (manualMode && builder != null) {			int numEdges = Integer.parseInt(enterField.getText());			ObjectList s = SpaceSide.createPoly(numEdges, builder.edgeLength);			double r = builder.getMaxRadius();			OrderedTriple[] p = new OrderedTriple[s.num];			for (int i = 0; i < s.num; ++i) {				p[i] = (OrderedTriple) s.get(i);				p[i].y = -Math.sqrt(r * r - p[i].x * p[i].x - p[i].z * p[i].z);			}			try {				if (looseBuilder == null)					createLooseBuilder();				looseBuilder.sides.num = 0;				looseBuilder.points.num = 0;				looseBuilder.vectors.num = 0;				looseSide = new SpaceSide(p[0], p[1], p[2], s, looseBuilder);				looseSide.setPoints(looseBuilder.points);				looseSide.setVectors(looseBuilder.vectors);				looseSide.setNormal(looseBuilder.vectors.add(looseSide.calcNormal()));				looseBuilder.sides.add(looseSide);				loosePoly = new SpacePoly(this, looseBuilder);				loosePoly.personalAxes.sizeFactor = poly.personalAxes.sizeFactor;				loosePoly.showBackSides = true;				loosePoly.edgeColor = Color.white;				viewerCanvas.stuckLoose = viewerCanvas.stickyLoose = false;				viewerCanvas.repaint();			} catch (Exception ex) {				System.out.println("PolyButton.action");				System.out.println(ex.getMessage());				ex.printStackTrace();			}		} else if (enterField.thetaGood()) {			int entry = Integer.parseInt(enterField.getText());			addEntry(entry);			checkCreateKeypad();			newButton.setEnabled(true);		}	}	void showCoordinatesCheckbox_Action(ActionEvent event) {		showCoordinates = showCoordinatesCheckbox.isSelected();	}	void addEntry(int entry) {		label1.setText(label1.getText() + " " + String.valueOf(entry));		polys[numEntries] = entry;		numEntries++;		sumTheta += polyAngle(entry);		if (numEntries >= 3)			createButton.setEnabled(true);		viewerCanvas.repaint();	}	void clearEntries() {		numEntries = 0;		sumTheta = 0;		label1.setText("");		viewerCanvas.repaint();	}	void checkCreateKeypad() {		polyButton1.check();		polyButton2.check();		polyButton3.check();		polyButton4.check();		polyButton5.check();		polyButton6.check();		double theta = Math.PI * (1 - 2.0 / 7.0);		if (sumTheta + theta >= 2 * Math.PI) {			otherButton.setEnabled(false);		}	}	private float intToHue(int i) {		float[] hues = new float[9];		hues[3] = Color.RGBtoHSB(Color.red.getRed(), Color.red.getGreen(), Color.red.getBlue(), null)[0];		hues[4] = Color.RGBtoHSB(Color.yellow.getRed(), Color.yellow.getGreen(), Color.yellow.getBlue(), null)[0];		hues[5] = Color.RGBtoHSB(Color.blue.getRed(), Color.blue.getGreen(), Color.blue.getBlue(), null)[0];		hues[6] = Color.RGBtoHSB(Color.green.getRed(), Color.green.getGreen(), Color.green.getBlue(), null)[0];		hues[7] = Color.RGBtoHSB(Color.cyan.getRed(), Color.cyan.getGreen(), Color.cyan.getBlue(), null)[0];		hues[8] = Color.RGBtoHSB(Color.magenta.getRed(), Color.magenta.getGreen(), Color.magenta.getBlue(), null)[0];		if (i > 8)			i = 7;		return hues[i];	}	public Color getColor(int polyType) {		if (colorCoding)			return Color.getHSBColor(intToHue(polyType), 1f, 1f);		else			return color1;	}	public float getHue(SpaceSide s) {		if (colorCoding) {			int p;			if (s instanceof TruncableSpaceSide)				p = ((TruncableSpaceSide) s).theoreticalNumPoints();			else				p = s.numPoints();			return intToHue(p);		} else {			if (s instanceof TruncableSpaceSide && ((TruncableSpaceSide) s).cornerSide)				return hue2;			else				return hue1;		}	}	void drawEdgesCheckbox_Action(ActionEvent event) {		drawEdges = drawEdgesCheckbox.isSelected();		viewerCanvas.repaint();	}	void predefinedCheckbox_Action(ActionEvent event) {		if (predefinedCheckbox.isSelected()) {			if (predefinedSolidsList == null) {				createPredefinedSolidsList();				createMethodCardPanel.add(predefinedSolidsList, "auto");			}			showCard(createMethodCardPanel, "auto");		} else {			createButton.setEnabled(false);			showCard(createMethodCardPanel, "poly");		}	}	void create(int[] polys, int numPolys, boolean dual) {		analyzeList.stopDemo();		if (transformPanel == null) {			createTransformPanel();			mainCardPanel.add(transformPanel, "transform");		}		videoPlayer1.stop();		if (labeledSlider1 != null)			labeledSlider1.setVisible(false);		if (dualOriginalButton != null)			dualOriginalButton.setVisible(false);		createButton.setEnabled(false);		enableCreateKeypad(manualMode);		if (manualMode) {			builder = ArchiBuilder.manualArchiBuilder(polys, numPolys);			// builder.sizeToFit(viewerCanvas.size().width * .9);			// if (poly != null) poly.stop();			poly = new SpacePoly(this, builder);			poly.sizeToFit(viewerCanvas.getWidth(), viewerCanvas.getHeight());			poly.showBackSides = true;		} else {			// if (!Archimedean.PRIVILEGED && !ExtendedSolidDefinition.isKnown(polys,			// numPolys)) {			if (!Archimedean.PRIVILEGED && !SolidDefinition.isKnown(polys, numPolys)) {				statusLabel.setText("Unable to complete this solid.");				builder = null;			} else {				builder = new ArchiBuilder(polys, numPolys);				if (builder.type == ExtendedSolidDefinition.UNDEFINED) {					statusLabel.setText("Unable to complete this solid.");				}			}			if (dual) {				builder = builder.dual().commit(poly);				dualRadioButton.setText("Anti-dual...");				dualRadioButton.setVisible(true);				truncateCornersRadioButton.setVisible(false);				truncateEdgesRadioButton.setVisible(false);			} else {				dualRadioButton.setText("Dual...");				dualRadioButton.setVisible(true);				truncateCornersRadioButton.setVisible(true);				truncateEdgesRadioButton.setVisible(true);			}			if (builder != null) {				poly = new SpacePoly(this, builder);				poly.sizeToFit(viewerCanvas.getWidth(), viewerCanvas.getHeight());				if (builder.type != ExtendedSolidDefinition.UNDEFINED) {					analyzeRadioButton.setVisible(true);					// analyzeMenuItem.setEnabled( true );					if (builder.type != ExtendedSolidDefinition.RATIONAL) {						transformRadioButton.setVisible(true);						// transformMenuItem.setEnabled( true );					}				}			}			dualBuilder = null;		}		looseSide = null;		loosePoly = null;		viewerCanvas.buildMode = false;		viewerCanvas.repaint();		if (transformPanel != null)			group2.clear();		newButton.setEnabled(true);	}	void newTransformationButton_Action(ActionEvent event) {		analyzeList.stopDemo();		builder.reclaim();		builder = builder.commit(poly);		dualBuilder = null;		builder.reclaim();		boolean showCircumscribedSphere = poly.isShowCircumscribedSphere();		boolean showInscribedSphere = poly.isShowInscribedSphere();		poly = new SpacePoly(this, builder, poly.personalAxes);		poly.setShowCircumscribedSphere(showCircumscribedSphere);		poly.setShowInscribedSphere(showInscribedSphere);		group2.clear();		dualRadioButton.setVisible(false);		truncateCornersRadioButton.setVisible(false);		truncateEdgesRadioButton.setVisible(false);		switch (builder.type) {		case ExtendedSolidDefinition.PLATONIC:		case ExtendedSolidDefinition.ARCHIMEDEAN:			dualRadioButton.setText("Dual...");			dualRadioButton.setVisible(true);			truncateCornersRadioButton.setVisible(true);			truncateEdgesRadioButton.setVisible(true);			break;		case ExtendedSolidDefinition.DUAL:			dualRadioButton.setText("Anti-dual...");			dualRadioButton.setVisible(true);			truncateCornersRadioButton.setVisible(false);			truncateEdgesRadioButton.setVisible(false);			break;		case ExtendedSolidDefinition.OTHER:		default:			break;		}		labeledSlider1.setVisible(false);		dualOriginalButton.setVisible(false);		viewerCanvas.buildMode = false;		viewerCanvas.repaint();	}	void manualBuildCheckbox_Action(ActionEvent event) {		manualMode = manualBuildCheckbox.isSelected();		if (manualMode) {			transformRadioButton.setVisible(false);			// transformMenuItem.setEnabled( false );			analyzeRadioButton.setVisible(false);			// analyzeMenuItem.setEnabled( false );			enableCreateKeypad(true);			createButton.setEnabled(false);		}	}	static boolean isPrism(int[] sign, int length) {		int[] temp = ArchiCorner.getSignature(sign, length);		return temp.length == 3 && temp[0] == 4 && temp[1] == 4 && temp[2] >= 5;	}	static boolean isAntiprism(int[] sign, int length) {		int[] temp = ArchiCorner.getSignature(sign, length);		return temp.length == 4 && temp[0] == 3 && temp[1] == 3 && temp[2] == 3 && temp[3] >= 4;	}	void enableCreateKeypad(boolean able) {		polyButton1.setEnabled(able);		polyButton2.setEnabled(able);		polyButton3.setEnabled(able);		polyButton4.setEnabled(able);		polyButton5.setEnabled(able);		polyButton6.setEnabled(able);		otherButton.setEnabled(able);	}	void createLooseBuilder() {		looseBuilder = new ArchiBuilder();		looseBuilder.points = new ObjectList(200);		looseBuilder.sides = new ObjectList(1);		looseBuilder.vectors = new ObjectList(1);	}	void printParents() {		Component c = this;		while (c != null) {			System.out.println(c);			c = c.getParent();		}	}	public static void main(String[] arg) {		create(false);	}	public static void create(boolean isApplet) {		Archimedean gui = new Archimedean();		JFrame frame = new JFrame();		gui.parentFrame = frame;		frame.getContentPane().add(gui);		frame.setTitle("Archimedean 1.1");		if (!isApplet) {			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);		}		frame.pack();		frame.setVisible(true);		TreePrinterUtils.printLayout(frame.getContentPane());	}	public static AbstractButton getSelection(ButtonGroup g) {		for (Enumeration e = g.getElements(); e.hasMoreElements();) {			AbstractButton b = (AbstractButton) e.nextElement();			if (b.isSelected()) {				return b;			}		}		return null;	}	public static void showCard(Container c, String name) {		((CardLayout) c.getLayout()).show(c, name);	}	public void setCursor(int cursor) {		setCursor(new Cursor(cursor));	}}